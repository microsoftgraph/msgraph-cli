// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Places.Count;
using ApiSdk.Places.GraphRoom;
using ApiSdk.Places.GraphRoomList;
using ApiSdk.Places.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
namespace ApiSdk.Places
{
    /// <summary>
    /// Builds and executes requests for operations under \places
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PlacesRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Provides operations to manage the collection of place entities.
        /// </summary>
        /// <returns>A Tuple&lt;List&lt;Command&gt;, List&lt;Command&gt;&gt;</returns>
        public Tuple<List<Command>, List<Command>> BuildCommand()
        {
            var executables = new List<Command>();
            var commands = new List<Command>();
            var builder = new global::ApiSdk.Places.Item.PlaceItemRequestBuilder(PathParameters);
            executables.Add(builder.BuildDeleteCommand());
            commands.Add(builder.BuildGraphRoomByIdNavCommand());
            commands.Add(builder.BuildGraphRoomListByIdNavCommand());
            executables.Add(builder.BuildPatchCommand());
            return new(executables, commands);
        }
        /// <summary>
        /// Provides operations to count the resources in the collection.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountNavCommand()
        {
            var command = new Command("count");
            command.Description = "Provides operations to count the resources in the collection.";
            var builder = new global::ApiSdk.Places.Count.CountRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to roomList.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphRoomListNavCommand()
        {
            var command = new Command("graph-room-list");
            command.Description = "Casts the previous resource to roomList.";
            var builder = new global::ApiSdk.Places.GraphRoomList.GraphRoomListRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to room.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphRoomNavCommand()
        {
            var command = new Command("graph-room");
            command.Description = "Casts the previous resource to room.";
            var builder = new global::ApiSdk.Places.GraphRoom.GraphRoomRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Places.PlacesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public PlacesRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/places", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Places.PlacesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public PlacesRequestBuilder(string rawUrl) : base("{+baseurl}/places", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
