// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Malware information entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WindowsMalwareInformation : global::ApiSdk.Models.Entity, IParsable
    {
        /// <summary>Indicates an informational URL to learn more about the malware</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdditionalInformationUrl { get; set; }
#nullable restore
#else
        public string AdditionalInformationUrl { get; set; }
#endif
        /// <summary>Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. default value is invalid. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.</summary>
        public global::ApiSdk.Models.WindowsMalwareCategory? Category { get; set; }
        /// <summary>List of devices affected by current malware with the malware state on each device</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.MalwareStateForWindowsDevice>? DeviceMalwareStates { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.MalwareStateForWindowsDevice> DeviceMalwareStates { get; set; }
#endif
        /// <summary>Indicates the name of the malware</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Indicates the last time the malware was detected in UTC</summary>
        public DateTimeOffset? LastDetectionDateTime { get; set; }
        /// <summary>Severity of the malware. Possible values are: unknown, low, moderate, high, severe. default is unknown. Possible values are: unknown, low, moderate, high, severe.</summary>
        public global::ApiSdk.Models.WindowsMalwareSeverity? Severity { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.WindowsMalwareInformation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.WindowsMalwareInformation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.WindowsMalwareInformation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "additionalInformationUrl", n => { AdditionalInformationUrl = n.GetStringValue(); } },
                { "category", n => { Category = n.GetEnumValue<global::ApiSdk.Models.WindowsMalwareCategory>(); } },
                { "deviceMalwareStates", n => { DeviceMalwareStates = n.GetCollectionOfObjectValues<global::ApiSdk.Models.MalwareStateForWindowsDevice>(global::ApiSdk.Models.MalwareStateForWindowsDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "lastDetectionDateTime", n => { LastDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                { "severity", n => { Severity = n.GetEnumValue<global::ApiSdk.Models.WindowsMalwareSeverity>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("additionalInformationUrl", AdditionalInformationUrl);
            writer.WriteEnumValue<global::ApiSdk.Models.WindowsMalwareCategory>("category", Category);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.MalwareStateForWindowsDevice>("deviceMalwareStates", DeviceMalwareStates);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("lastDetectionDateTime", LastDetectionDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.WindowsMalwareSeverity>("severity", Severity);
        }
    }
}
#pragma warning restore CS0618
