// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class VirtualEventRegistration : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Date and time when the registrant cancels their registration for the virtual event. Only appears when applicable. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CancelationDateTime { get; set; }
        /// <summary>Email address of the registrant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The external information for a virtual event registration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.VirtualEventExternalRegistrationInformation? ExternalRegistrationInformation { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.VirtualEventExternalRegistrationInformation ExternalRegistrationInformation { get; set; }
#endif
        /// <summary>First name of the registrant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>Last name of the registrant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The registrant&apos;s preferred language.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredLanguage { get; set; }
#nullable restore
#else
        public string PreferredLanguage { get; set; }
#endif
        /// <summary>The registrant&apos;s time zone details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredTimezone { get; set; }
#nullable restore
#else
        public string PreferredTimezone { get; set; }
#endif
        /// <summary>Date and time when the registrant registers for the virtual event. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? RegistrationDateTime { get; set; }
        /// <summary>The registrant&apos;s answer to the registration questions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.VirtualEventRegistrationQuestionAnswer>? RegistrationQuestionAnswers { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.VirtualEventRegistrationQuestionAnswer> RegistrationQuestionAnswers { get; set; }
#endif
        /// <summary>Sessions for a registration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.VirtualEventSession>? Sessions { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.VirtualEventSession> Sessions { get; set; }
#endif
        /// <summary>Registration status of the registrant. Read-only. Possible values are registered, canceled, waitlisted, pendingApproval, rejectedByOrganizer, and unknownFutureValue.</summary>
        public global::ApiSdk.Models.VirtualEventAttendeeRegistrationStatus? Status { get; set; }
        /// <summary>The registrant&apos;s ID in Microsoft Entra ID. Only appears when the registrant is registered in Microsoft Entra ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.VirtualEventRegistration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.VirtualEventRegistration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.VirtualEventRegistration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "cancelationDateTime", n => { CancelationDateTime = n.GetDateTimeOffsetValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "externalRegistrationInformation", n => { ExternalRegistrationInformation = n.GetObjectValue<global::ApiSdk.Models.VirtualEventExternalRegistrationInformation>(global::ApiSdk.Models.VirtualEventExternalRegistrationInformation.CreateFromDiscriminatorValue); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "preferredLanguage", n => { PreferredLanguage = n.GetStringValue(); } },
                { "preferredTimezone", n => { PreferredTimezone = n.GetStringValue(); } },
                { "registrationDateTime", n => { RegistrationDateTime = n.GetDateTimeOffsetValue(); } },
                { "registrationQuestionAnswers", n => { RegistrationQuestionAnswers = n.GetCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventRegistrationQuestionAnswer>(global::ApiSdk.Models.VirtualEventRegistrationQuestionAnswer.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sessions", n => { Sessions = n.GetCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventSession>(global::ApiSdk.Models.VirtualEventSession.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::ApiSdk.Models.VirtualEventAttendeeRegistrationStatus>(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("cancelationDateTime", CancelationDateTime);
            writer.WriteStringValue("email", Email);
            writer.WriteObjectValue<global::ApiSdk.Models.VirtualEventExternalRegistrationInformation>("externalRegistrationInformation", ExternalRegistrationInformation);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteStringValue("preferredLanguage", PreferredLanguage);
            writer.WriteStringValue("preferredTimezone", PreferredTimezone);
            writer.WriteDateTimeOffsetValue("registrationDateTime", RegistrationDateTime);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventRegistrationQuestionAnswer>("registrationQuestionAnswers", RegistrationQuestionAnswers);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventSession>("sessions", Sessions);
            writer.WriteEnumValue<global::ApiSdk.Models.VirtualEventAttendeeRegistrationStatus>("status", Status);
            writer.WriteStringValue("userId", UserId);
        }
    }
}
#pragma warning restore CS0618
