// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Malware state for a windows device
    /// </summary>
    public class MalwareStateForWindowsDevice : Entity, IParsable
    {
        /// <summary>Indicates the number of times the malware is detected</summary>
        public int? DetectionCount { get; set; }
        /// <summary>Indicates the name of the device being evaluated for malware state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName { get; set; }
#nullable restore
#else
        public string DeviceName { get; set; }
#endif
        /// <summary>Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.</summary>
        public WindowsMalwareExecutionState? ExecutionState { get; set; }
        /// <summary>Initial detection datetime of the malware</summary>
        public DateTimeOffset? InitialDetectionDateTime { get; set; }
        /// <summary>The last time this particular threat was changed</summary>
        public DateTimeOffset? LastStateChangeDateTime { get; set; }
        /// <summary>Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.</summary>
        public WindowsMalwareThreatState? ThreatState { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="MalwareStateForWindowsDevice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new MalwareStateForWindowsDevice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MalwareStateForWindowsDevice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "detectionCount", n => { DetectionCount = n.GetIntValue(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "executionState", n => { ExecutionState = n.GetEnumValue<WindowsMalwareExecutionState>(); } },
                { "initialDetectionDateTime", n => { InitialDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                { "lastStateChangeDateTime", n => { LastStateChangeDateTime = n.GetDateTimeOffsetValue(); } },
                { "threatState", n => { ThreatState = n.GetEnumValue<WindowsMalwareThreatState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("detectionCount", DetectionCount);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteEnumValue<WindowsMalwareExecutionState>("executionState", ExecutionState);
            writer.WriteDateTimeOffsetValue("initialDetectionDateTime", InitialDetectionDateTime);
            writer.WriteDateTimeOffsetValue("lastStateChangeDateTime", LastStateChangeDateTime);
            writer.WriteEnumValue<WindowsMalwareThreatState>("threatState", ThreatState);
        }
    }
}
