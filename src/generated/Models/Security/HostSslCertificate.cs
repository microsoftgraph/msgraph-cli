// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models.Security
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HostSslCertificate : global::ApiSdk.Models.Security.Artifact, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The first date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? FirstSeenDateTime { get; set; }
        /// <summary>The host for this hostSslCertificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Security.Host? Host { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Security.Host Host { get; set; }
#endif
        /// <summary>The most recent date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? LastSeenDateTime { get; set; }
        /// <summary>The ports related with this hostSslCertificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.Security.HostSslCertificatePort>? Ports { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.Security.HostSslCertificatePort> Ports { get; set; }
#endif
        /// <summary>The sslCertificate for this hostSslCertificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Security.SslCertificate? SslCertificate { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Security.SslCertificate SslCertificate { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.Security.HostSslCertificate"/> and sets the default values.
        /// </summary>
        public HostSslCertificate() : base()
        {
            OdataType = "#microsoft.graph.security.hostSslCertificate";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Security.HostSslCertificate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.Security.HostSslCertificate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.Security.HostSslCertificate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "firstSeenDateTime", n => { FirstSeenDateTime = n.GetDateTimeOffsetValue(); } },
                { "host", n => { Host = n.GetObjectValue<global::ApiSdk.Models.Security.Host>(global::ApiSdk.Models.Security.Host.CreateFromDiscriminatorValue); } },
                { "lastSeenDateTime", n => { LastSeenDateTime = n.GetDateTimeOffsetValue(); } },
                { "ports", n => { Ports = n.GetCollectionOfObjectValues<global::ApiSdk.Models.Security.HostSslCertificatePort>(global::ApiSdk.Models.Security.HostSslCertificatePort.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sslCertificate", n => { SslCertificate = n.GetObjectValue<global::ApiSdk.Models.Security.SslCertificate>(global::ApiSdk.Models.Security.SslCertificate.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("firstSeenDateTime", FirstSeenDateTime);
            writer.WriteObjectValue<global::ApiSdk.Models.Security.Host>("host", Host);
            writer.WriteDateTimeOffsetValue("lastSeenDateTime", LastSeenDateTime);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.Security.HostSslCertificatePort>("ports", Ports);
            writer.WriteObjectValue<global::ApiSdk.Models.Security.SslCertificate>("sslCertificate", SslCertificate);
        }
    }
}
#pragma warning restore CS0618
