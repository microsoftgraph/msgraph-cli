// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models.Security
{
    #pragma warning disable CS1591
    public class RetentionLabel : ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Specifies the action to take on the labeled document after the period specified by the retentionDuration property expires. The possible values are: none, delete, startDispositionReview, unknownFutureValue.</summary>
        public ApiSdk.Models.Security.ActionAfterRetentionPeriod? ActionAfterRetentionPeriod { get; set; }
        /// <summary>Specifies how the behavior of a document with this label should be during the retention period. The possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue.</summary>
        public ApiSdk.Models.Security.BehaviorDuringRetentionPeriod? BehaviorDuringRetentionPeriod { get; set; }
        /// <summary>Represents the user who created the retentionLabel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.IdentitySet? CreatedBy { get; set; }
#nullable restore
#else
        public ApiSdk.Models.IdentitySet CreatedBy { get; set; }
#endif
        /// <summary>Represents the date and time in which the retentionLabel is created.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Specifies the locked or unlocked state of a record label when it is created.The possible values are: startLocked, startUnlocked, unknownFutureValue.</summary>
        public ApiSdk.Models.Security.DefaultRecordBehavior? DefaultRecordBehavior { get; set; }
        /// <summary>Provides label information for the admin. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DescriptionForAdmins { get; set; }
#nullable restore
#else
        public string DescriptionForAdmins { get; set; }
#endif
        /// <summary>Provides the label information for the user. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DescriptionForUsers { get; set; }
#nullable restore
#else
        public string DescriptionForUsers { get; set; }
#endif
        /// <summary>Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FilePlanDescriptor? Descriptors { get; set; }
#nullable restore
#else
        public FilePlanDescriptor Descriptors { get; set; }
#endif
        /// <summary>Unique string that defines a label name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>When action at the end of retention is chosen as &apos;dispositionReview&apos;, dispositionReviewStages specifies a sequential set of stages with at least one reviewer in each stage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<DispositionReviewStage>? DispositionReviewStages { get; set; }
#nullable restore
#else
        public List<DispositionReviewStage> DispositionReviewStages { get; set; }
#endif
        /// <summary>Specifies whether the label is currently being used.</summary>
        public bool? IsInUse { get; set; }
        /// <summary>Specifies the replacement label to be applied automatically after the retention period of the current label ends.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LabelToBeApplied { get; set; }
#nullable restore
#else
        public string LabelToBeApplied { get; set; }
#endif
        /// <summary>The user who last modified the retentionLabel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.IdentitySet? LastModifiedBy { get; set; }
#nullable restore
#else
        public ApiSdk.Models.IdentitySet LastModifiedBy { get; set; }
#endif
        /// <summary>The latest date time when the retentionLabel was modified.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>Specifies the number of days to retain the content.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Security.RetentionDuration? RetentionDuration { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Security.RetentionDuration RetentionDuration { get; set; }
#endif
        /// <summary>Represents the type associated with a retention event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Security.RetentionEventType? RetentionEventType { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Security.RetentionEventType RetentionEventType { get; set; }
#endif
        /// <summary>Specifies whether the retention duration is calculated from the content creation date, labeled date, or last modification date. The possible values are: dateLabeled, dateCreated, dateModified, dateOfEvent, unknownFutureValue.</summary>
        public ApiSdk.Models.Security.RetentionTrigger? RetentionTrigger { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RetentionLabel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new RetentionLabel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RetentionLabel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "actionAfterRetentionPeriod", n => { ActionAfterRetentionPeriod = n.GetEnumValue<ActionAfterRetentionPeriod>(); } },
                { "behaviorDuringRetentionPeriod", n => { BehaviorDuringRetentionPeriod = n.GetEnumValue<BehaviorDuringRetentionPeriod>(); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<ApiSdk.Models.IdentitySet>(ApiSdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "defaultRecordBehavior", n => { DefaultRecordBehavior = n.GetEnumValue<DefaultRecordBehavior>(); } },
                { "descriptionForAdmins", n => { DescriptionForAdmins = n.GetStringValue(); } },
                { "descriptionForUsers", n => { DescriptionForUsers = n.GetStringValue(); } },
                { "descriptors", n => { Descriptors = n.GetObjectValue<FilePlanDescriptor>(FilePlanDescriptor.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "dispositionReviewStages", n => { DispositionReviewStages = n.GetCollectionOfObjectValues<DispositionReviewStage>(DispositionReviewStage.CreateFromDiscriminatorValue)?.ToList(); } },
                { "isInUse", n => { IsInUse = n.GetBoolValue(); } },
                { "labelToBeApplied", n => { LabelToBeApplied = n.GetStringValue(); } },
                { "lastModifiedBy", n => { LastModifiedBy = n.GetObjectValue<ApiSdk.Models.IdentitySet>(ApiSdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "retentionDuration", n => { RetentionDuration = n.GetObjectValue<ApiSdk.Models.Security.RetentionDuration>(ApiSdk.Models.Security.RetentionDuration.CreateFromDiscriminatorValue); } },
                { "retentionEventType", n => { RetentionEventType = n.GetObjectValue<ApiSdk.Models.Security.RetentionEventType>(ApiSdk.Models.Security.RetentionEventType.CreateFromDiscriminatorValue); } },
                { "retentionTrigger", n => { RetentionTrigger = n.GetEnumValue<RetentionTrigger>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<ActionAfterRetentionPeriod>("actionAfterRetentionPeriod", ActionAfterRetentionPeriod);
            writer.WriteEnumValue<BehaviorDuringRetentionPeriod>("behaviorDuringRetentionPeriod", BehaviorDuringRetentionPeriod);
            writer.WriteObjectValue<ApiSdk.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteEnumValue<DefaultRecordBehavior>("defaultRecordBehavior", DefaultRecordBehavior);
            writer.WriteStringValue("descriptionForAdmins", DescriptionForAdmins);
            writer.WriteStringValue("descriptionForUsers", DescriptionForUsers);
            writer.WriteObjectValue<FilePlanDescriptor>("descriptors", Descriptors);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteCollectionOfObjectValues<DispositionReviewStage>("dispositionReviewStages", DispositionReviewStages);
            writer.WriteBoolValue("isInUse", IsInUse);
            writer.WriteStringValue("labelToBeApplied", LabelToBeApplied);
            writer.WriteObjectValue<ApiSdk.Models.IdentitySet>("lastModifiedBy", LastModifiedBy);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteObjectValue<ApiSdk.Models.Security.RetentionDuration>("retentionDuration", RetentionDuration);
            writer.WriteObjectValue<ApiSdk.Models.Security.RetentionEventType>("retentionEventType", RetentionEventType);
            writer.WriteEnumValue<RetentionTrigger>("retentionTrigger", RetentionTrigger);
        }
    }
}
