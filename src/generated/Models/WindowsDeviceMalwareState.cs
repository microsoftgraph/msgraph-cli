// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Malware detection entity.
    /// </summary>
    public class WindowsDeviceMalwareState : Entity, IParsable
    {
        /// <summary>Information URL to learn more about the malware</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdditionalInformationUrl { get; set; }
#nullable restore
#else
        public string AdditionalInformationUrl { get; set; }
#endif
        /// <summary>Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.</summary>
        public WindowsMalwareCategory? Category { get; set; }
        /// <summary>Number of times the malware is detected</summary>
        public int? DetectionCount { get; set; }
        /// <summary>Malware name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.</summary>
        public WindowsMalwareExecutionState? ExecutionState { get; set; }
        /// <summary>Initial detection datetime of the malware</summary>
        public DateTimeOffset? InitialDetectionDateTime { get; set; }
        /// <summary>The last time this particular threat was changed</summary>
        public DateTimeOffset? LastStateChangeDateTime { get; set; }
        /// <summary>Severity of the malware. Possible values are: unknown, low, moderate, high, severe.</summary>
        public WindowsMalwareSeverity? Severity { get; set; }
        /// <summary>Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.</summary>
        public WindowsMalwareState? State { get; set; }
        /// <summary>Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.</summary>
        public WindowsMalwareThreatState? ThreatState { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WindowsDeviceMalwareState"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new WindowsDeviceMalwareState CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WindowsDeviceMalwareState();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "additionalInformationUrl", n => { AdditionalInformationUrl = n.GetStringValue(); } },
                { "category", n => { Category = n.GetEnumValue<WindowsMalwareCategory>(); } },
                { "detectionCount", n => { DetectionCount = n.GetIntValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "executionState", n => { ExecutionState = n.GetEnumValue<WindowsMalwareExecutionState>(); } },
                { "initialDetectionDateTime", n => { InitialDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                { "lastStateChangeDateTime", n => { LastStateChangeDateTime = n.GetDateTimeOffsetValue(); } },
                { "severity", n => { Severity = n.GetEnumValue<WindowsMalwareSeverity>(); } },
                { "state", n => { State = n.GetEnumValue<WindowsMalwareState>(); } },
                { "threatState", n => { ThreatState = n.GetEnumValue<WindowsMalwareThreatState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("additionalInformationUrl", AdditionalInformationUrl);
            writer.WriteEnumValue<WindowsMalwareCategory>("category", Category);
            writer.WriteIntValue("detectionCount", DetectionCount);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteEnumValue<WindowsMalwareExecutionState>("executionState", ExecutionState);
            writer.WriteDateTimeOffsetValue("initialDetectionDateTime", InitialDetectionDateTime);
            writer.WriteDateTimeOffsetValue("lastStateChangeDateTime", LastStateChangeDateTime);
            writer.WriteEnumValue<WindowsMalwareSeverity>("severity", Severity);
            writer.WriteEnumValue<WindowsMalwareState>("state", State);
            writer.WriteEnumValue<WindowsMalwareThreatState>("threatState", ThreatState);
        }
    }
}
