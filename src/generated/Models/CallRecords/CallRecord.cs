// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models.CallRecords
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CallRecord : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>UTC time when the last user left the call. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>Meeting URL associated to the call. May not be available for a peerToPeer call record type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JoinWebUrl { get; set; }
#nullable restore
#else
        public string JoinWebUrl { get; set; }
#endif
        /// <summary>UTC time when the call record was created. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>List of all the modalities used in the call. Possible values are: unknown, audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.CallRecords.Modality?>? Modalities { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.CallRecords.Modality?> Modalities { get; set; }
#endif
        /// <summary>The organizing party&apos;s identity. The organizer property is deprecated and will stop returning data on June 30, 2026. Going forward, use the organizer_v2 relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IdentitySet? Organizer { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IdentitySet Organizer { get; set; }
#endif
        /// <summary>Identity of the organizer of the call. This relationship is expanded by default in callRecord methods.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.CallRecords.Organizer? OrganizerV2 { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.CallRecords.Organizer OrganizerV2 { get; set; }
#endif
        /// <summary>List of distinct identities involved in the call. Limited to 130 entries. The participants property is deprecated and will stop returning data on June 30, 2026. Going forward, use the participants_v2 relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.IdentitySet>? Participants { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.IdentitySet> Participants { get; set; }
#endif
        /// <summary>List of distinct participants in the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.CallRecords.Participant>? ParticipantsV2 { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.CallRecords.Participant> ParticipantsV2 { get; set; }
#endif
        /// <summary>List of sessions involved in the call. Peer-to-peer calls typically only have one session, whereas group calls typically have at least one session per participant. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.CallRecords.Session>? Sessions { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.CallRecords.Session> Sessions { get; set; }
#endif
        /// <summary>UTC time when the first user joined the call. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? StartDateTime { get; set; }
        /// <summary>The type property</summary>
        public global::ApiSdk.Models.CallRecords.CallType? Type { get; set; }
        /// <summary>Monotonically increasing version of the call record. Higher version call records with the same id includes additional data compared to the lower version.</summary>
        public long? Version { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.CallRecords.CallRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.CallRecords.CallRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.CallRecords.CallRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "joinWebUrl", n => { JoinWebUrl = n.GetStringValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "modalities", n => { Modalities = n.GetCollectionOfEnumValues<global::ApiSdk.Models.CallRecords.Modality>()?.AsList(); } },
                { "organizer", n => { Organizer = n.GetObjectValue<global::ApiSdk.Models.IdentitySet>(global::ApiSdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "organizer_v2", n => { OrganizerV2 = n.GetObjectValue<global::ApiSdk.Models.CallRecords.Organizer>(global::ApiSdk.Models.CallRecords.Organizer.CreateFromDiscriminatorValue); } },
                { "participants", n => { Participants = n.GetCollectionOfObjectValues<global::ApiSdk.Models.IdentitySet>(global::ApiSdk.Models.IdentitySet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "participants_v2", n => { ParticipantsV2 = n.GetCollectionOfObjectValues<global::ApiSdk.Models.CallRecords.Participant>(global::ApiSdk.Models.CallRecords.Participant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sessions", n => { Sessions = n.GetCollectionOfObjectValues<global::ApiSdk.Models.CallRecords.Session>(global::ApiSdk.Models.CallRecords.Session.CreateFromDiscriminatorValue)?.AsList(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::ApiSdk.Models.CallRecords.CallType>(); } },
                { "version", n => { Version = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteStringValue("joinWebUrl", JoinWebUrl);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteCollectionOfEnumValues<global::ApiSdk.Models.CallRecords.Modality>("modalities", Modalities);
            writer.WriteObjectValue<global::ApiSdk.Models.IdentitySet>("organizer", Organizer);
            writer.WriteObjectValue<global::ApiSdk.Models.CallRecords.Organizer>("organizer_v2", OrganizerV2);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.IdentitySet>("participants", Participants);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.CallRecords.Participant>("participants_v2", ParticipantsV2);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.CallRecords.Session>("sessions", Sessions);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.CallRecords.CallType>("type", Type);
            writer.WriteLongValue("version", Version);
        }
    }
}
#pragma warning restore CS0618
