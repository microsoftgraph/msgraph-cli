// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Contains properties and inherited properties for iOS Volume-Purchased Program (VPP) Apps.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IosVppApp : global::ApiSdk.Models.MobileApp, IParsable
    {
        /// <summary>The applicable iOS Device Type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.IosDeviceType? ApplicableDeviceType { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.IosDeviceType ApplicableDeviceType { get; set; }
#endif
        /// <summary>The store URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppStoreUrl { get; set; }
#nullable restore
#else
        public string AppStoreUrl { get; set; }
#endif
        /// <summary>The Identity Name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BundleId { get; set; }
#nullable restore
#else
        public string BundleId { get; set; }
#endif
        /// <summary>The supported License Type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.VppLicensingType? LicensingType { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.VppLicensingType LicensingType { get; set; }
#endif
        /// <summary>The VPP application release date and time.</summary>
        public DateTimeOffset? ReleaseDateTime { get; set; }
        /// <summary>The total number of VPP licenses.</summary>
        public int? TotalLicenseCount { get; set; }
        /// <summary>The number of VPP licenses in use.</summary>
        public int? UsedLicenseCount { get; set; }
        /// <summary>Possible types of an Apple Volume Purchase Program token.</summary>
        public global::ApiSdk.Models.VppTokenAccountType? VppTokenAccountType { get; set; }
        /// <summary>The Apple Id associated with the given Apple Volume Purchase Program Token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VppTokenAppleId { get; set; }
#nullable restore
#else
        public string VppTokenAppleId { get; set; }
#endif
        /// <summary>The organization associated with the Apple Volume Purchase Program Token</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VppTokenOrganizationName { get; set; }
#nullable restore
#else
        public string VppTokenOrganizationName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.IosVppApp"/> and sets the default values.
        /// </summary>
        public IosVppApp() : base()
        {
            OdataType = "#microsoft.graph.iosVppApp";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.IosVppApp"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.IosVppApp CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.IosVppApp();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appStoreUrl", n => { AppStoreUrl = n.GetStringValue(); } },
                { "applicableDeviceType", n => { ApplicableDeviceType = n.GetObjectValue<global::ApiSdk.Models.IosDeviceType>(global::ApiSdk.Models.IosDeviceType.CreateFromDiscriminatorValue); } },
                { "bundleId", n => { BundleId = n.GetStringValue(); } },
                { "licensingType", n => { LicensingType = n.GetObjectValue<global::ApiSdk.Models.VppLicensingType>(global::ApiSdk.Models.VppLicensingType.CreateFromDiscriminatorValue); } },
                { "releaseDateTime", n => { ReleaseDateTime = n.GetDateTimeOffsetValue(); } },
                { "totalLicenseCount", n => { TotalLicenseCount = n.GetIntValue(); } },
                { "usedLicenseCount", n => { UsedLicenseCount = n.GetIntValue(); } },
                { "vppTokenAccountType", n => { VppTokenAccountType = n.GetEnumValue<global::ApiSdk.Models.VppTokenAccountType>(); } },
                { "vppTokenAppleId", n => { VppTokenAppleId = n.GetStringValue(); } },
                { "vppTokenOrganizationName", n => { VppTokenOrganizationName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::ApiSdk.Models.IosDeviceType>("applicableDeviceType", ApplicableDeviceType);
            writer.WriteStringValue("appStoreUrl", AppStoreUrl);
            writer.WriteStringValue("bundleId", BundleId);
            writer.WriteObjectValue<global::ApiSdk.Models.VppLicensingType>("licensingType", LicensingType);
            writer.WriteDateTimeOffsetValue("releaseDateTime", ReleaseDateTime);
            writer.WriteIntValue("totalLicenseCount", TotalLicenseCount);
            writer.WriteIntValue("usedLicenseCount", UsedLicenseCount);
            writer.WriteEnumValue<global::ApiSdk.Models.VppTokenAccountType>("vppTokenAccountType", VppTokenAccountType);
            writer.WriteStringValue("vppTokenAppleId", VppTokenAppleId);
            writer.WriteStringValue("vppTokenOrganizationName", VppTokenOrganizationName);
        }
    }
}
#pragma warning restore CS0618
