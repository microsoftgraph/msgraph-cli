// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EventMessage : global::ApiSdk.Models.Message, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The endDateTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.DateTimeTimeZone? EndDateTime { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.DateTimeTimeZone EndDateTime { get; set; }
#endif
        /// <summary>The event associated with the event message. The assumption for attendees or room resources is that the Calendar Attendant is set to automatically update the calendar with an event when meeting request event messages arrive. Navigation property. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Event? Event { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Event Event { get; set; }
#endif
        /// <summary>The isAllDay property</summary>
        public bool? IsAllDay { get; set; }
        /// <summary>True if this meeting request is accessible to a delegate, false otherwise. The default is false.</summary>
        public bool? IsDelegated { get; set; }
        /// <summary>The isOutOfDate property</summary>
        public bool? IsOutOfDate { get; set; }
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Location? Location { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Location Location { get; set; }
#endif
        /// <summary>The type of event message: none, meetingRequest, meetingCancelled, meetingAccepted, meetingTenativelyAccepted, meetingDeclined.</summary>
        public global::ApiSdk.Models.MeetingMessageType? MeetingMessageType { get; set; }
        /// <summary>The recurrence property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.PatternedRecurrence? Recurrence { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.PatternedRecurrence Recurrence { get; set; }
#endif
        /// <summary>The startDateTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.DateTimeTimeZone? StartDateTime { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.DateTimeTimeZone StartDateTime { get; set; }
#endif
        /// <summary>The type property</summary>
        public global::ApiSdk.Models.EventType? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.EventMessage"/> and sets the default values.
        /// </summary>
        public EventMessage() : base()
        {
            OdataType = "#microsoft.graph.eventMessage";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.EventMessage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.EventMessage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.eventMessageRequest" => new global::ApiSdk.Models.EventMessageRequest(),
                "#microsoft.graph.eventMessageResponse" => new global::ApiSdk.Models.EventMessageResponse(),
                _ => new global::ApiSdk.Models.EventMessage(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "endDateTime", n => { EndDateTime = n.GetObjectValue<global::ApiSdk.Models.DateTimeTimeZone>(global::ApiSdk.Models.DateTimeTimeZone.CreateFromDiscriminatorValue); } },
                { "event", n => { Event = n.GetObjectValue<global::ApiSdk.Models.Event>(global::ApiSdk.Models.Event.CreateFromDiscriminatorValue); } },
                { "isAllDay", n => { IsAllDay = n.GetBoolValue(); } },
                { "isDelegated", n => { IsDelegated = n.GetBoolValue(); } },
                { "isOutOfDate", n => { IsOutOfDate = n.GetBoolValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::ApiSdk.Models.Location>(global::ApiSdk.Models.Location.CreateFromDiscriminatorValue); } },
                { "meetingMessageType", n => { MeetingMessageType = n.GetEnumValue<global::ApiSdk.Models.MeetingMessageType>(); } },
                { "recurrence", n => { Recurrence = n.GetObjectValue<global::ApiSdk.Models.PatternedRecurrence>(global::ApiSdk.Models.PatternedRecurrence.CreateFromDiscriminatorValue); } },
                { "startDateTime", n => { StartDateTime = n.GetObjectValue<global::ApiSdk.Models.DateTimeTimeZone>(global::ApiSdk.Models.DateTimeTimeZone.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::ApiSdk.Models.EventType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::ApiSdk.Models.DateTimeTimeZone>("endDateTime", EndDateTime);
            writer.WriteObjectValue<global::ApiSdk.Models.Event>("event", Event);
            writer.WriteBoolValue("isAllDay", IsAllDay);
            writer.WriteBoolValue("isDelegated", IsDelegated);
            writer.WriteBoolValue("isOutOfDate", IsOutOfDate);
            writer.WriteObjectValue<global::ApiSdk.Models.Location>("location", Location);
            writer.WriteEnumValue<global::ApiSdk.Models.MeetingMessageType>("meetingMessageType", MeetingMessageType);
            writer.WriteObjectValue<global::ApiSdk.Models.PatternedRecurrence>("recurrence", Recurrence);
            writer.WriteObjectValue<global::ApiSdk.Models.DateTimeTimeZone>("startDateTime", StartDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.EventType>("type", Type);
        }
    }
}
#pragma warning restore CS0618
