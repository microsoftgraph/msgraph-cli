// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class VirtualEvent : global::ApiSdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The identity information for the creator of the virtual event. Inherited from virtualEvent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.CommunicationsIdentitySet? CreatedBy { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.CommunicationsIdentitySet CreatedBy { get; set; }
#endif
        /// <summary>A description of the virtual event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.ItemBody? Description { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.ItemBody Description { get; set; }
#endif
        /// <summary>The display name of the virtual event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The end time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.DateTimeTimeZone? EndDateTime { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.DateTimeTimeZone EndDateTime { get; set; }
#endif
        /// <summary>The virtual event presenters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.VirtualEventPresenter>? Presenters { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.VirtualEventPresenter> Presenters { get; set; }
#endif
        /// <summary>The sessions for the virtual event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ApiSdk.Models.VirtualEventSession>? Sessions { get; set; }
#nullable restore
#else
        public List<global::ApiSdk.Models.VirtualEventSession> Sessions { get; set; }
#endif
        /// <summary>The virtual event settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.VirtualEventSettings? Settings { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.VirtualEventSettings Settings { get; set; }
#endif
        /// <summary>Start time of the virtual event. The timeZone property can be set to any of the time zones currently supported by Windows. For details on how to get all available time zones using PowerShell, see Get-TimeZone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.DateTimeTimeZone? StartDateTime { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.DateTimeTimeZone StartDateTime { get; set; }
#endif
        /// <summary>The status of the virtual event. The possible values are: draft, published, canceled, and unknownFutureValue.</summary>
        public global::ApiSdk.Models.VirtualEventStatus? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.VirtualEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::ApiSdk.Models.VirtualEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.virtualEventTownhall" => new global::ApiSdk.Models.VirtualEventTownhall(),
                "#microsoft.graph.virtualEventWebinar" => new global::ApiSdk.Models.VirtualEventWebinar(),
                _ => new global::ApiSdk.Models.VirtualEvent(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::ApiSdk.Models.CommunicationsIdentitySet>(global::ApiSdk.Models.CommunicationsIdentitySet.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetObjectValue<global::ApiSdk.Models.ItemBody>(global::ApiSdk.Models.ItemBody.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetObjectValue<global::ApiSdk.Models.DateTimeTimeZone>(global::ApiSdk.Models.DateTimeTimeZone.CreateFromDiscriminatorValue); } },
                { "presenters", n => { Presenters = n.GetCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventPresenter>(global::ApiSdk.Models.VirtualEventPresenter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sessions", n => { Sessions = n.GetCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventSession>(global::ApiSdk.Models.VirtualEventSession.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::ApiSdk.Models.VirtualEventSettings>(global::ApiSdk.Models.VirtualEventSettings.CreateFromDiscriminatorValue); } },
                { "startDateTime", n => { StartDateTime = n.GetObjectValue<global::ApiSdk.Models.DateTimeTimeZone>(global::ApiSdk.Models.DateTimeTimeZone.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::ApiSdk.Models.VirtualEventStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::ApiSdk.Models.CommunicationsIdentitySet>("createdBy", CreatedBy);
            writer.WriteObjectValue<global::ApiSdk.Models.ItemBody>("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<global::ApiSdk.Models.DateTimeTimeZone>("endDateTime", EndDateTime);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventPresenter>("presenters", Presenters);
            writer.WriteCollectionOfObjectValues<global::ApiSdk.Models.VirtualEventSession>("sessions", Sessions);
            writer.WriteObjectValue<global::ApiSdk.Models.VirtualEventSettings>("settings", Settings);
            writer.WriteObjectValue<global::ApiSdk.Models.DateTimeTimeZone>("startDateTime", StartDateTime);
            writer.WriteEnumValue<global::ApiSdk.Models.VirtualEventStatus>("status", Status);
        }
    }
}
#pragma warning restore CS0618
