// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Windows device malware overview.
    /// </summary>
    public class WindowsMalwareOverview : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of device counts per malware category</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsMalwareCategoryCount>? MalwareCategorySummary { get; set; }
#nullable restore
#else
        public List<WindowsMalwareCategoryCount> MalwareCategorySummary { get; set; }
#endif
        /// <summary>Count of devices with malware detected in the last 30 days</summary>
        public int? MalwareDetectedDeviceCount { get; set; }
        /// <summary>List of device counts per malware execution state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsMalwareExecutionStateCount>? MalwareExecutionStateSummary { get; set; }
#nullable restore
#else
        public List<WindowsMalwareExecutionStateCount> MalwareExecutionStateSummary { get; set; }
#endif
        /// <summary>List of device counts per malware</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsMalwareNameCount>? MalwareNameSummary { get; set; }
#nullable restore
#else
        public List<WindowsMalwareNameCount> MalwareNameSummary { get; set; }
#endif
        /// <summary>List of active malware counts per malware severity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsMalwareSeverityCount>? MalwareSeveritySummary { get; set; }
#nullable restore
#else
        public List<WindowsMalwareSeverityCount> MalwareSeveritySummary { get; set; }
#endif
        /// <summary>List of device counts per malware state</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WindowsMalwareStateCount>? MalwareStateSummary { get; set; }
#nullable restore
#else
        public List<WindowsMalwareStateCount> MalwareStateSummary { get; set; }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>List of device counts with malware per windows OS version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<OsVersionCount>? OsVersionsSummary { get; set; }
#nullable restore
#else
        public List<OsVersionCount> OsVersionsSummary { get; set; }
#endif
        /// <summary>Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647</summary>
        public int? TotalDistinctMalwareCount { get; set; }
        /// <summary>Count of all malware detections across all devices. Valid values -2147483648 to 2147483647</summary>
        public int? TotalMalwareCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="WindowsMalwareOverview"/> and sets the default values.
        /// </summary>
        public WindowsMalwareOverview()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WindowsMalwareOverview"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WindowsMalwareOverview CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WindowsMalwareOverview();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "malwareCategorySummary", n => { MalwareCategorySummary = n.GetCollectionOfObjectValues<WindowsMalwareCategoryCount>(WindowsMalwareCategoryCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareDetectedDeviceCount", n => { MalwareDetectedDeviceCount = n.GetIntValue(); } },
                { "malwareExecutionStateSummary", n => { MalwareExecutionStateSummary = n.GetCollectionOfObjectValues<WindowsMalwareExecutionStateCount>(WindowsMalwareExecutionStateCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareNameSummary", n => { MalwareNameSummary = n.GetCollectionOfObjectValues<WindowsMalwareNameCount>(WindowsMalwareNameCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareSeveritySummary", n => { MalwareSeveritySummary = n.GetCollectionOfObjectValues<WindowsMalwareSeverityCount>(WindowsMalwareSeverityCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "malwareStateSummary", n => { MalwareStateSummary = n.GetCollectionOfObjectValues<WindowsMalwareStateCount>(WindowsMalwareStateCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "osVersionsSummary", n => { OsVersionsSummary = n.GetCollectionOfObjectValues<OsVersionCount>(OsVersionCount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "totalDistinctMalwareCount", n => { TotalDistinctMalwareCount = n.GetIntValue(); } },
                { "totalMalwareCount", n => { TotalMalwareCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<WindowsMalwareCategoryCount>("malwareCategorySummary", MalwareCategorySummary);
            writer.WriteIntValue("malwareDetectedDeviceCount", MalwareDetectedDeviceCount);
            writer.WriteCollectionOfObjectValues<WindowsMalwareExecutionStateCount>("malwareExecutionStateSummary", MalwareExecutionStateSummary);
            writer.WriteCollectionOfObjectValues<WindowsMalwareNameCount>("malwareNameSummary", MalwareNameSummary);
            writer.WriteCollectionOfObjectValues<WindowsMalwareSeverityCount>("malwareSeveritySummary", MalwareSeveritySummary);
            writer.WriteCollectionOfObjectValues<WindowsMalwareStateCount>("malwareStateSummary", MalwareStateSummary);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteCollectionOfObjectValues<OsVersionCount>("osVersionsSummary", OsVersionsSummary);
            writer.WriteIntValue("totalDistinctMalwareCount", TotalDistinctMalwareCount);
            writer.WriteIntValue("totalMalwareCount", TotalMalwareCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
