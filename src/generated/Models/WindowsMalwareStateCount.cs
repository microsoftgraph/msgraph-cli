// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Windows Malware State Summary.
    /// </summary>
    public class WindowsMalwareStateCount : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Count of devices with malware detections for this malware State</summary>
        public int? DeviceCount { get; set; }
        /// <summary>Count of distinct malwares for this malware State. Valid values -2147483648 to 2147483647</summary>
        public int? DistinctMalwareCount { get; set; }
        /// <summary>The Timestamp of the last update for the device count in UTC</summary>
        public DateTimeOffset? LastUpdateDateTime { get; set; }
        /// <summary>Count of total malware detections for this malware State. Valid values -2147483648 to 2147483647</summary>
        public int? MalwareDetectionCount { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>Malware threat status</summary>
        public WindowsMalwareThreatState? State { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="WindowsMalwareStateCount"/> and sets the default values.
        /// </summary>
        public WindowsMalwareStateCount()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WindowsMalwareStateCount"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WindowsMalwareStateCount CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WindowsMalwareStateCount();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "deviceCount", n => { DeviceCount = n.GetIntValue(); } },
                { "distinctMalwareCount", n => { DistinctMalwareCount = n.GetIntValue(); } },
                { "lastUpdateDateTime", n => { LastUpdateDateTime = n.GetDateTimeOffsetValue(); } },
                { "malwareDetectionCount", n => { MalwareDetectionCount = n.GetIntValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<WindowsMalwareThreatState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("deviceCount", DeviceCount);
            writer.WriteIntValue("distinctMalwareCount", DistinctMalwareCount);
            writer.WriteDateTimeOffsetValue("lastUpdateDateTime", LastUpdateDateTime);
            writer.WriteIntValue("malwareDetectionCount", MalwareDetectionCount);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteEnumValue<WindowsMalwareThreatState>("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
