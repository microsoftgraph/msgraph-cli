// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class MultiTenantOrganizationMember : DirectoryObject, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Tenant ID of the tenant that added the tenant to the multitenant organization. Read-only.</summary>
        public Guid? AddedByTenantId { get; set; }
        /// <summary>Date and time when the tenant was added to the multitenant organization. Read-only.</summary>
        public DateTimeOffset? AddedDateTime { get; set; }
        /// <summary>Display name of the tenant added to the multitenant organization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Date and time when the tenant joined the multitenant organization. Read-only.</summary>
        public DateTimeOffset? JoinedDateTime { get; set; }
        /// <summary>Role of the tenant in the multitenant organization. The possible values are: owner, member (default), unknownFutureValue. Tenants with the owner role can manage the multitenant organization but tenants with the member role can only participate in a multitenant organization. There can be multiple tenants with the owner role in a multitenant organization.</summary>
        public MultiTenantOrganizationMemberRole? Role { get; set; }
        /// <summary>State of the tenant in the multitenant organization. The possible values are: pending, active, removed, unknownFutureValue. Tenants in the pending state must join the multitenant organization to participate in the multitenant organization. Tenants in the active state can participate in the multitenant organization. Tenants in the removed state are in the process of being removed from the multitenant organization. Read-only.</summary>
        public MultiTenantOrganizationMemberState? State { get; set; }
        /// <summary>Tenant ID of the Microsoft Entra tenant added to the multitenant organization. Set at the time tenant is added.Supports $filter. Key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>Details of the processing status for a tenant in a multitenant organization. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MultiTenantOrganizationMemberTransitionDetails? TransitionDetails { get; set; }
#nullable restore
#else
        public MultiTenantOrganizationMemberTransitionDetails TransitionDetails { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="MultiTenantOrganizationMember"/> and sets the default values.
        /// </summary>
        public MultiTenantOrganizationMember() : base()
        {
            OdataType = "#microsoft.graph.multiTenantOrganizationMember";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="MultiTenantOrganizationMember"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new MultiTenantOrganizationMember CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MultiTenantOrganizationMember();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "addedByTenantId", n => { AddedByTenantId = n.GetGuidValue(); } },
                { "addedDateTime", n => { AddedDateTime = n.GetDateTimeOffsetValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "joinedDateTime", n => { JoinedDateTime = n.GetDateTimeOffsetValue(); } },
                { "role", n => { Role = n.GetEnumValue<MultiTenantOrganizationMemberRole>(); } },
                { "state", n => { State = n.GetEnumValue<MultiTenantOrganizationMemberState>(); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "transitionDetails", n => { TransitionDetails = n.GetObjectValue<MultiTenantOrganizationMemberTransitionDetails>(MultiTenantOrganizationMemberTransitionDetails.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteGuidValue("addedByTenantId", AddedByTenantId);
            writer.WriteDateTimeOffsetValue("addedDateTime", AddedDateTime);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("joinedDateTime", JoinedDateTime);
            writer.WriteEnumValue<MultiTenantOrganizationMemberRole>("role", Role);
            writer.WriteEnumValue<MultiTenantOrganizationMemberState>("state", State);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteObjectValue<MultiTenantOrganizationMemberTransitionDetails>("transitionDetails", TransitionDetails);
        }
    }
}
