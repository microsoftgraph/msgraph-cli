// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Contains properties for file encryption information for the content version of a line of business app.
    /// </summary>
    public class FileEncryptionInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The key used to encrypt the file content.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? EncryptionKey { get; set; }
#nullable restore
#else
        public byte[] EncryptionKey { get; set; }
#endif
        /// <summary>The file digest prior to encryption. ProfileVersion1 requires a non-null FileDigest.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? FileDigest { get; set; }
#nullable restore
#else
        public byte[] FileDigest { get; set; }
#endif
        /// <summary>The file digest algorithm. ProfileVersion1 currently only supports SHA256 for the FileDigestAlgorithm.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileDigestAlgorithm { get; set; }
#nullable restore
#else
        public string FileDigestAlgorithm { get; set; }
#endif
        /// <summary>The initialization vector (IV) used for the encryption algorithm. Must be 16 bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? InitializationVector { get; set; }
#nullable restore
#else
        public byte[] InitializationVector { get; set; }
#endif
        /// <summary>The hash of the concatenation of the IV and encrypted file content. Must be 32 bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Mac { get; set; }
#nullable restore
#else
        public byte[] Mac { get; set; }
#endif
        /// <summary>The key used to compute the message authentication code of the concatenation of the IV and encrypted file content. Must be 32 bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? MacKey { get; set; }
#nullable restore
#else
        public byte[] MacKey { get; set; }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>The profile identifier. Maps to the strategy used to encrypt the file. Currently, only ProfileVersion1 is supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileIdentifier { get; set; }
#nullable restore
#else
        public string ProfileIdentifier { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="FileEncryptionInfo"/> and sets the default values.
        /// </summary>
        public FileEncryptionInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FileEncryptionInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FileEncryptionInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FileEncryptionInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "encryptionKey", n => { EncryptionKey = n.GetByteArrayValue(); } },
                { "fileDigest", n => { FileDigest = n.GetByteArrayValue(); } },
                { "fileDigestAlgorithm", n => { FileDigestAlgorithm = n.GetStringValue(); } },
                { "initializationVector", n => { InitializationVector = n.GetByteArrayValue(); } },
                { "mac", n => { Mac = n.GetByteArrayValue(); } },
                { "macKey", n => { MacKey = n.GetByteArrayValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "profileIdentifier", n => { ProfileIdentifier = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteByteArrayValue("encryptionKey", EncryptionKey);
            writer.WriteByteArrayValue("fileDigest", FileDigest);
            writer.WriteStringValue("fileDigestAlgorithm", FileDigestAlgorithm);
            writer.WriteByteArrayValue("initializationVector", InitializationVector);
            writer.WriteByteArrayValue("mac", Mac);
            writer.WriteByteArrayValue("macKey", MacKey);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("profileIdentifier", ProfileIdentifier);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
