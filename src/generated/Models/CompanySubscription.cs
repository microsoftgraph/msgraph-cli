// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    #pragma warning disable CS1591
    public class CompanySubscription : Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The commerceSubscriptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommerceSubscriptionId { get; set; }
#nullable restore
#else
        public string CommerceSubscriptionId { get; set; }
#endif
        /// <summary>The createdDateTime property</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The isTrial property</summary>
        public bool? IsTrial { get; set; }
        /// <summary>The nextLifecycleDateTime property</summary>
        public DateTimeOffset? NextLifecycleDateTime { get; set; }
        /// <summary>The ownerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerId { get; set; }
#nullable restore
#else
        public string OwnerId { get; set; }
#endif
        /// <summary>The ownerTenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerTenantId { get; set; }
#nullable restore
#else
        public string OwnerTenantId { get; set; }
#endif
        /// <summary>The ownerType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerType { get; set; }
#nullable restore
#else
        public string OwnerType { get; set; }
#endif
        /// <summary>The serviceStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ServicePlanInfo>? ServiceStatus { get; set; }
#nullable restore
#else
        public List<ServicePlanInfo> ServiceStatus { get; set; }
#endif
        /// <summary>The skuId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SkuId { get; set; }
#nullable restore
#else
        public string SkuId { get; set; }
#endif
        /// <summary>The skuPartNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SkuPartNumber { get; set; }
#nullable restore
#else
        public string SkuPartNumber { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The totalLicenses property</summary>
        public int? TotalLicenses { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CompanySubscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CompanySubscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CompanySubscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "commerceSubscriptionId", n => { CommerceSubscriptionId = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "isTrial", n => { IsTrial = n.GetBoolValue(); } },
                { "nextLifecycleDateTime", n => { NextLifecycleDateTime = n.GetDateTimeOffsetValue(); } },
                { "ownerId", n => { OwnerId = n.GetStringValue(); } },
                { "ownerTenantId", n => { OwnerTenantId = n.GetStringValue(); } },
                { "ownerType", n => { OwnerType = n.GetStringValue(); } },
                { "serviceStatus", n => { ServiceStatus = n.GetCollectionOfObjectValues<ServicePlanInfo>(ServicePlanInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                { "skuId", n => { SkuId = n.GetStringValue(); } },
                { "skuPartNumber", n => { SkuPartNumber = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "totalLicenses", n => { TotalLicenses = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("commerceSubscriptionId", CommerceSubscriptionId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteBoolValue("isTrial", IsTrial);
            writer.WriteDateTimeOffsetValue("nextLifecycleDateTime", NextLifecycleDateTime);
            writer.WriteStringValue("ownerId", OwnerId);
            writer.WriteStringValue("ownerTenantId", OwnerTenantId);
            writer.WriteStringValue("ownerType", OwnerType);
            writer.WriteCollectionOfObjectValues<ServicePlanInfo>("serviceStatus", ServiceStatus);
            writer.WriteStringValue("skuId", SkuId);
            writer.WriteStringValue("skuPartNumber", SkuPartNumber);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("totalLicenses", TotalLicenses);
        }
    }
}
