// <auto-generated/>
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Abs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AccrInt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AccrIntM;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Acos;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Acosh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Acot;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Acoth;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AmorDegrc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AmorLinc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.And;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Arabic;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Areas;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Asc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Asin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Asinh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Atan2;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Atan;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Atanh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AveDev;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Average;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AverageA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AverageIf;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.AverageIfs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.BahtText;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Base;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.BesselI;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.BesselJ;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.BesselK;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.BesselY;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Beta_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Beta_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bin2Dec;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bin2Hex;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bin2Oct;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Binom_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Binom_Dist_Range;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Binom_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bitand;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bitlshift;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bitor;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bitrshift;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Bitxor;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ceiling_Math;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ceiling_Precise;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CharNamespace;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Dist_RT;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ChiSq_Inv_RT;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Choose;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Clean;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Code;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Columns;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Combin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Combina;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Complex;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Concatenate;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Confidence_Norm;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Confidence_T;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ConvertNamespace;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Cos;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Cosh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Cot;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Coth;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Count;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CountA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CountBlank;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CountIf;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CountIfs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CoupDayBs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CoupDays;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CoupDaysNc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CoupNcd;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CoupNum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CoupPcd;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Csc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Csch;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CumIPmt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.CumPrinc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DateNamespace;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Datevalue;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Daverage;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Day;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Days360;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Days;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Db;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dbcs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dcount;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DcountA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ddb;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dec2Bin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dec2Hex;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dec2Oct;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DecimalNamespace;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Degrees;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Delta;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DevSq;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dget;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Disc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dmax;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dmin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dollar;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DollarDe;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DollarFr;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dproduct;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DstDev;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DstDevP;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dsum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Duration;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Dvar;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.DvarP;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ecma_Ceiling;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Edate;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Effect;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.EoMonth;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Erf;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ErfC;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ErfC_Precise;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Erf_Precise;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Error_Type;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Even;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Exact;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Exp;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Expon_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.F_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.F_Dist_RT;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.F_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.F_Inv_RT;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Fact;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.FactDouble;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.False;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Find;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.FindB;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Fisher;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.FisherInv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Fixed;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Floor_Math;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Floor_Precise;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Fv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Fvschedule;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Gamma;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.GammaLn;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.GammaLn_Precise;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Gamma_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Gamma_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Gauss;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Gcd;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.GeStep;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.GeoMean;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.HarMean;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Hex2Bin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Hex2Dec;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Hex2Oct;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Hlookup;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Hour;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.HypGeom_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Hyperlink;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.If;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImAbs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImArgument;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImConjugate;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImCos;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImCosh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImCot;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImCsc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImCsch;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImDiv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImExp;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImLn;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImLog10;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImLog2;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImPower;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImProduct;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImReal;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSec;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSech;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSinh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSqrt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSub;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImSum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ImTan;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Imaginary;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Int;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IntRate;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ipmt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Irr;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsErr;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsError;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsEven;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsFormula;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsLogical;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsNA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsNonText;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsNumber;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsOdd;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsText;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.IsoWeekNum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Iso_Ceiling;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ispmt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Isref;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Kurt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Large;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Lcm;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Left;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Leftb;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Len;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Lenb;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ln;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Log10;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Log;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.LogNorm_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.LogNorm_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Lookup;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Lower;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Match;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Max;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.MaxA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Mduration;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Median;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Mid;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Midb;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Min;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.MinA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Minute;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Mirr;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Mod;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Month;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Mround;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.MultiNomial;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.N;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Na;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.NegBinom_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.NetworkDays;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.NetworkDays_Intl;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Nominal;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Norm_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Norm_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Norm_S_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Norm_S_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Not;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Now;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Nper;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Npv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.NumberValue;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Oct2Bin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Oct2Dec;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Oct2Hex;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Odd;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.OddFPrice;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.OddFYield;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.OddLPrice;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.OddLYield;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Or;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Pduration;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.PercentRank_Exc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.PercentRank_Inc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Percentile_Exc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Percentile_Inc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Permut;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Permutationa;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Phi;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Pi;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Pmt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Poisson_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Power;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Ppmt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Price;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.PriceDisc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.PriceMat;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Product;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Proper;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Pv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Quartile_Exc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Quartile_Inc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Quotient;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Radians;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rand;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.RandBetween;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rank_Avg;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rank_Eq;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rate;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Received;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Replace;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.ReplaceB;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rept;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Right;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rightb;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Roman;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Round;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.RoundDown;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.RoundUp;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rows;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Rri;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sec;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sech;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Second;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.SeriesSum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sheet;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sheets;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sign;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sin;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sinh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Skew;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Skew_p;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sln;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Small;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sqrt;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.SqrtPi;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.StDevA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.StDevPA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.StDev_P;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.StDev_S;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Standardize;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Substitute;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Subtotal;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Sum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.SumIf;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.SumIfs;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.SumSq;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Syd;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.T;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.T_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.T_Dist_2T;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.T_Dist_RT;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.T_Inv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.T_Inv_2T;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Tan;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Tanh;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.TbillEq;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.TbillPrice;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.TbillYield;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Text;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Time;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Timevalue;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Today;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Trim;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.TrimMean;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.True;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Trunc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.TypeNamespace;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Unichar;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Unicode;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Upper;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Usdollar;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Value;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.VarA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.VarPA;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Var_P;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Var_S;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Vdb;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Vlookup;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.WeekNum;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Weekday;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Weibull_Dist;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.WorkDay;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.WorkDay_Intl;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Xirr;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Xnpv;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Xor;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Year;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.YearFrac;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Yield;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.YieldDisc;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.YieldMat;
using ApiSdk.Drives.Item.Items.Item.Workbook.Functions.Z_Test;
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Drives.Item.Items.Item.Workbook.Functions
{
    /// <summary>
    /// Provides operations to manage the functions property of the microsoft.graph.workbook entity.
    /// </summary>
    public class FunctionsRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Provides operations to call the abs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAbsNavCommand()
        {
            var command = new Command("abs");
            command.Description = "Provides operations to call the abs method.";
            var builder = new AbsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the accrIntM method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAccrIntMNavCommand()
        {
            var command = new Command("accr-int-m");
            command.Description = "Provides operations to call the accrIntM method.";
            var builder = new AccrIntMRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the accrInt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAccrIntNavCommand()
        {
            var command = new Command("accr-int");
            command.Description = "Provides operations to call the accrInt method.";
            var builder = new AccrIntRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the acosh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAcoshNavCommand()
        {
            var command = new Command("acosh");
            command.Description = "Provides operations to call the acosh method.";
            var builder = new AcoshRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the acos method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAcosNavCommand()
        {
            var command = new Command("acos");
            command.Description = "Provides operations to call the acos method.";
            var builder = new AcosRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the acoth method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAcothNavCommand()
        {
            var command = new Command("acoth");
            command.Description = "Provides operations to call the acoth method.";
            var builder = new AcothRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the acot method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAcotNavCommand()
        {
            var command = new Command("acot");
            command.Description = "Provides operations to call the acot method.";
            var builder = new AcotRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the amorDegrc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAmorDegrcNavCommand()
        {
            var command = new Command("amor-degrc");
            command.Description = "Provides operations to call the amorDegrc method.";
            var builder = new AmorDegrcRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the amorLinc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAmorLincNavCommand()
        {
            var command = new Command("amor-linc");
            command.Description = "Provides operations to call the amorLinc method.";
            var builder = new AmorLincRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the and method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAndNavCommand()
        {
            var command = new Command("and");
            command.Description = "Provides operations to call the and method.";
            var builder = new AndRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the arabic method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildArabicNavCommand()
        {
            var command = new Command("arabic");
            command.Description = "Provides operations to call the arabic method.";
            var builder = new ArabicRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the areas method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAreasNavCommand()
        {
            var command = new Command("areas");
            command.Description = "Provides operations to call the areas method.";
            var builder = new AreasRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the asc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAscNavCommand()
        {
            var command = new Command("asc");
            command.Description = "Provides operations to call the asc method.";
            var builder = new AscRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the asinh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAsinhNavCommand()
        {
            var command = new Command("asinh");
            command.Description = "Provides operations to call the asinh method.";
            var builder = new AsinhRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the asin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAsinNavCommand()
        {
            var command = new Command("asin");
            command.Description = "Provides operations to call the asin method.";
            var builder = new AsinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the atan2 method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAtan2NavCommand()
        {
            var command = new Command("atan2");
            command.Description = "Provides operations to call the atan2 method.";
            var builder = new Atan2RequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the atanh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAtanhNavCommand()
        {
            var command = new Command("atanh");
            command.Description = "Provides operations to call the atanh method.";
            var builder = new AtanhRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the atan method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAtanNavCommand()
        {
            var command = new Command("atan");
            command.Description = "Provides operations to call the atan method.";
            var builder = new AtanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the aveDev method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAveDevNavCommand()
        {
            var command = new Command("ave-dev");
            command.Description = "Provides operations to call the aveDev method.";
            var builder = new AveDevRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the averageA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAverageANavCommand()
        {
            var command = new Command("average-a");
            command.Description = "Provides operations to call the averageA method.";
            var builder = new AverageARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the averageIf method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAverageIfNavCommand()
        {
            var command = new Command("average-if");
            command.Description = "Provides operations to call the averageIf method.";
            var builder = new AverageIfRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the averageIfs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAverageIfsNavCommand()
        {
            var command = new Command("average-ifs");
            command.Description = "Provides operations to call the averageIfs method.";
            var builder = new AverageIfsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the average method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAverageNavCommand()
        {
            var command = new Command("average");
            command.Description = "Provides operations to call the average method.";
            var builder = new AverageRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bahtText method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBahtTextNavCommand()
        {
            var command = new Command("baht-text");
            command.Description = "Provides operations to call the bahtText method.";
            var builder = new BahtTextRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the base method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBaseNavCommand()
        {
            var command = new Command("base");
            command.Description = "Provides operations to call the base method.";
            var builder = new BaseRequestBuilderEscaped(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the besselI method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBesselINavCommand()
        {
            var command = new Command("bessel-i");
            command.Description = "Provides operations to call the besselI method.";
            var builder = new BesselIRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the besselJ method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBesselJNavCommand()
        {
            var command = new Command("bessel-j");
            command.Description = "Provides operations to call the besselJ method.";
            var builder = new BesselJRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the besselK method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBesselKNavCommand()
        {
            var command = new Command("bessel-k");
            command.Description = "Provides operations to call the besselK method.";
            var builder = new BesselKRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the besselY method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBesselYNavCommand()
        {
            var command = new Command("bessel-y");
            command.Description = "Provides operations to call the besselY method.";
            var builder = new BesselYRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the beta_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBeta_DistNavCommand()
        {
            var command = new Command("beta_-dist");
            command.Description = "Provides operations to call the beta_Dist method.";
            var builder = new Beta_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the beta_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBeta_InvNavCommand()
        {
            var command = new Command("beta_-inv");
            command.Description = "Provides operations to call the beta_Inv method.";
            var builder = new Beta_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bin2Dec method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBin2DecNavCommand()
        {
            var command = new Command("bin2-dec");
            command.Description = "Provides operations to call the bin2Dec method.";
            var builder = new Bin2DecRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bin2Hex method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBin2HexNavCommand()
        {
            var command = new Command("bin2-hex");
            command.Description = "Provides operations to call the bin2Hex method.";
            var builder = new Bin2HexRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bin2Oct method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBin2OctNavCommand()
        {
            var command = new Command("bin2-oct");
            command.Description = "Provides operations to call the bin2Oct method.";
            var builder = new Bin2OctRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the binom_Dist_Range method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBinom_Dist_RangeNavCommand()
        {
            var command = new Command("binom_-dist_-range");
            command.Description = "Provides operations to call the binom_Dist_Range method.";
            var builder = new Binom_Dist_RangeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the binom_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBinom_DistNavCommand()
        {
            var command = new Command("binom_-dist");
            command.Description = "Provides operations to call the binom_Dist method.";
            var builder = new Binom_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the binom_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBinom_InvNavCommand()
        {
            var command = new Command("binom_-inv");
            command.Description = "Provides operations to call the binom_Inv method.";
            var builder = new Binom_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bitand method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBitandNavCommand()
        {
            var command = new Command("bitand");
            command.Description = "Provides operations to call the bitand method.";
            var builder = new BitandRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bitlshift method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBitlshiftNavCommand()
        {
            var command = new Command("bitlshift");
            command.Description = "Provides operations to call the bitlshift method.";
            var builder = new BitlshiftRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bitor method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBitorNavCommand()
        {
            var command = new Command("bitor");
            command.Description = "Provides operations to call the bitor method.";
            var builder = new BitorRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bitrshift method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBitrshiftNavCommand()
        {
            var command = new Command("bitrshift");
            command.Description = "Provides operations to call the bitrshift method.";
            var builder = new BitrshiftRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the bitxor method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildBitxorNavCommand()
        {
            var command = new Command("bitxor");
            command.Description = "Provides operations to call the bitxor method.";
            var builder = new BitxorRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ceiling_Math method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCeiling_MathNavCommand()
        {
            var command = new Command("ceiling_-math");
            command.Description = "Provides operations to call the ceiling_Math method.";
            var builder = new Ceiling_MathRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ceiling_Precise method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCeiling_PreciseNavCommand()
        {
            var command = new Command("ceiling_-precise");
            command.Description = "Provides operations to call the ceiling_Precise method.";
            var builder = new Ceiling_PreciseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the char method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCharNavCommand()
        {
            var command = new Command("char");
            command.Description = "Provides operations to call the char method.";
            var builder = new CharRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the chiSq_Dist_RT method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChiSq_Dist_RTNavCommand()
        {
            var command = new Command("chi-sq_-dist_-r-t");
            command.Description = "Provides operations to call the chiSq_Dist_RT method.";
            var builder = new ChiSq_Dist_RTRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the chiSq_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChiSq_DistNavCommand()
        {
            var command = new Command("chi-sq_-dist");
            command.Description = "Provides operations to call the chiSq_Dist method.";
            var builder = new ChiSq_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the chiSq_Inv_RT method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChiSq_Inv_RTNavCommand()
        {
            var command = new Command("chi-sq_-inv_-r-t");
            command.Description = "Provides operations to call the chiSq_Inv_RT method.";
            var builder = new ChiSq_Inv_RTRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the chiSq_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChiSq_InvNavCommand()
        {
            var command = new Command("chi-sq_-inv");
            command.Description = "Provides operations to call the chiSq_Inv method.";
            var builder = new ChiSq_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the choose method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildChooseNavCommand()
        {
            var command = new Command("choose");
            command.Description = "Provides operations to call the choose method.";
            var builder = new ChooseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the clean method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCleanNavCommand()
        {
            var command = new Command("clean");
            command.Description = "Provides operations to call the clean method.";
            var builder = new CleanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the code method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCodeNavCommand()
        {
            var command = new Command("code");
            command.Description = "Provides operations to call the code method.";
            var builder = new CodeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the columns method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildColumnsNavCommand()
        {
            var command = new Command("columns");
            command.Description = "Provides operations to call the columns method.";
            var builder = new ColumnsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the combina method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCombinaNavCommand()
        {
            var command = new Command("combina");
            command.Description = "Provides operations to call the combina method.";
            var builder = new CombinaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the combin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCombinNavCommand()
        {
            var command = new Command("combin");
            command.Description = "Provides operations to call the combin method.";
            var builder = new CombinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the complex method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildComplexNavCommand()
        {
            var command = new Command("complex");
            command.Description = "Provides operations to call the complex method.";
            var builder = new ComplexRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the concatenate method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConcatenateNavCommand()
        {
            var command = new Command("concatenate");
            command.Description = "Provides operations to call the concatenate method.";
            var builder = new ConcatenateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the confidence_Norm method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfidence_NormNavCommand()
        {
            var command = new Command("confidence_-norm");
            command.Description = "Provides operations to call the confidence_Norm method.";
            var builder = new Confidence_NormRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the confidence_T method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConfidence_TNavCommand()
        {
            var command = new Command("confidence_-t");
            command.Description = "Provides operations to call the confidence_T method.";
            var builder = new Confidence_TRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the convert method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildConvertNavCommand()
        {
            var command = new Command("convert");
            command.Description = "Provides operations to call the convert method.";
            var builder = new ConvertRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the cosh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoshNavCommand()
        {
            var command = new Command("cosh");
            command.Description = "Provides operations to call the cosh method.";
            var builder = new CoshRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the cos method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCosNavCommand()
        {
            var command = new Command("cos");
            command.Description = "Provides operations to call the cos method.";
            var builder = new CosRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coth method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCothNavCommand()
        {
            var command = new Command("coth");
            command.Description = "Provides operations to call the coth method.";
            var builder = new CothRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the cot method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCotNavCommand()
        {
            var command = new Command("cot");
            command.Description = "Provides operations to call the cot method.";
            var builder = new CotRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the countA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountANavCommand()
        {
            var command = new Command("count-a");
            command.Description = "Provides operations to call the countA method.";
            var builder = new CountARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the countBlank method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountBlankNavCommand()
        {
            var command = new Command("count-blank");
            command.Description = "Provides operations to call the countBlank method.";
            var builder = new CountBlankRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the countIf method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountIfNavCommand()
        {
            var command = new Command("count-if");
            command.Description = "Provides operations to call the countIf method.";
            var builder = new CountIfRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the countIfs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountIfsNavCommand()
        {
            var command = new Command("count-ifs");
            command.Description = "Provides operations to call the countIfs method.";
            var builder = new CountIfsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the count method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCountNavCommand()
        {
            var command = new Command("count");
            command.Description = "Provides operations to call the count method.";
            var builder = new CountRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coupDayBs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoupDayBsNavCommand()
        {
            var command = new Command("coup-day-bs");
            command.Description = "Provides operations to call the coupDayBs method.";
            var builder = new CoupDayBsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coupDays method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoupDaysNavCommand()
        {
            var command = new Command("coup-days");
            command.Description = "Provides operations to call the coupDays method.";
            var builder = new CoupDaysRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coupDaysNc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoupDaysNcNavCommand()
        {
            var command = new Command("coup-days-nc");
            command.Description = "Provides operations to call the coupDaysNc method.";
            var builder = new CoupDaysNcRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coupNcd method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoupNcdNavCommand()
        {
            var command = new Command("coup-ncd");
            command.Description = "Provides operations to call the coupNcd method.";
            var builder = new CoupNcdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coupNum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoupNumNavCommand()
        {
            var command = new Command("coup-num");
            command.Description = "Provides operations to call the coupNum method.";
            var builder = new CoupNumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the coupPcd method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCoupPcdNavCommand()
        {
            var command = new Command("coup-pcd");
            command.Description = "Provides operations to call the coupPcd method.";
            var builder = new CoupPcdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the csch method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCschNavCommand()
        {
            var command = new Command("csch");
            command.Description = "Provides operations to call the csch method.";
            var builder = new CschRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the csc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCscNavCommand()
        {
            var command = new Command("csc");
            command.Description = "Provides operations to call the csc method.";
            var builder = new CscRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the cumIPmt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCumIPmtNavCommand()
        {
            var command = new Command("cum-i-pmt");
            command.Description = "Provides operations to call the cumIPmt method.";
            var builder = new CumIPmtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the cumPrinc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCumPrincNavCommand()
        {
            var command = new Command("cum-princ");
            command.Description = "Provides operations to call the cumPrinc method.";
            var builder = new CumPrincRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the date method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDateNavCommand()
        {
            var command = new Command("date");
            command.Description = "Provides operations to call the date method.";
            var builder = new DateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the datevalue method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDatevalueNavCommand()
        {
            var command = new Command("datevalue");
            command.Description = "Provides operations to call the datevalue method.";
            var builder = new DatevalueRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the daverage method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDaverageNavCommand()
        {
            var command = new Command("daverage");
            command.Description = "Provides operations to call the daverage method.";
            var builder = new DaverageRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the day method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDayNavCommand()
        {
            var command = new Command("day");
            command.Description = "Provides operations to call the day method.";
            var builder = new DayRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the days360 method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDays360NavCommand()
        {
            var command = new Command("days360");
            command.Description = "Provides operations to call the days360 method.";
            var builder = new Days360RequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the days method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDaysNavCommand()
        {
            var command = new Command("days");
            command.Description = "Provides operations to call the days method.";
            var builder = new DaysRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dbcs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDbcsNavCommand()
        {
            var command = new Command("dbcs");
            command.Description = "Provides operations to call the dbcs method.";
            var builder = new DbcsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the db method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDbNavCommand()
        {
            var command = new Command("db");
            command.Description = "Provides operations to call the db method.";
            var builder = new DbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dcountA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDcountANavCommand()
        {
            var command = new Command("dcount-a");
            command.Description = "Provides operations to call the dcountA method.";
            var builder = new DcountARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dcount method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDcountNavCommand()
        {
            var command = new Command("dcount");
            command.Description = "Provides operations to call the dcount method.";
            var builder = new DcountRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ddb method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDdbNavCommand()
        {
            var command = new Command("ddb");
            command.Description = "Provides operations to call the ddb method.";
            var builder = new DdbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dec2Bin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDec2BinNavCommand()
        {
            var command = new Command("dec2-bin");
            command.Description = "Provides operations to call the dec2Bin method.";
            var builder = new Dec2BinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dec2Hex method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDec2HexNavCommand()
        {
            var command = new Command("dec2-hex");
            command.Description = "Provides operations to call the dec2Hex method.";
            var builder = new Dec2HexRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dec2Oct method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDec2OctNavCommand()
        {
            var command = new Command("dec2-oct");
            command.Description = "Provides operations to call the dec2Oct method.";
            var builder = new Dec2OctRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the decimal method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDecimalNavCommand()
        {
            var command = new Command("decimal");
            command.Description = "Provides operations to call the decimal method.";
            var builder = new DecimalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the degrees method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDegreesNavCommand()
        {
            var command = new Command("degrees");
            command.Description = "Provides operations to call the degrees method.";
            var builder = new DegreesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Delete navigation property functions for drives
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "Delete navigation property functions for drives";
            var driveIdOption = new Option<string>("--drive-id", description: "The unique identifier of drive") {
            };
            driveIdOption.IsRequired = true;
            command.AddOption(driveIdOption);
            var driveItemIdOption = new Option<string>("--drive-item-id", description: "The unique identifier of driveItem") {
            };
            driveItemIdOption.IsRequired = true;
            command.AddOption(driveItemIdOption);
            var ifMatchOption = new Option<string[]>("--if-match", description: "ETag") {
                Arity = ArgumentArity.ZeroOrMore
            };
            ifMatchOption.IsRequired = false;
            command.AddOption(ifMatchOption);
            command.SetHandler(async (invocationContext) => {
                var driveId = invocationContext.ParseResult.GetValueForOption(driveIdOption);
                var driveItemId = invocationContext.ParseResult.GetValueForOption(driveItemIdOption);
                var ifMatch = invocationContext.ParseResult.GetValueForOption(ifMatchOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (driveId is not null) requestInfo.PathParameters.Add("drive%2Did", driveId);
                if (driveItemId is not null) requestInfo.PathParameters.Add("driveItem%2Did", driveItemId);
                if (ifMatch is not null) requestInfo.Headers.Add("If-Match", ifMatch);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the delta method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeltaNavCommand()
        {
            var command = new Command("delta");
            command.Description = "Provides operations to call the delta method.";
            var builder = new DeltaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the devSq method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDevSqNavCommand()
        {
            var command = new Command("dev-sq");
            command.Description = "Provides operations to call the devSq method.";
            var builder = new DevSqRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dget method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDgetNavCommand()
        {
            var command = new Command("dget");
            command.Description = "Provides operations to call the dget method.";
            var builder = new DgetRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the disc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDiscNavCommand()
        {
            var command = new Command("disc");
            command.Description = "Provides operations to call the disc method.";
            var builder = new DiscRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dmax method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDmaxNavCommand()
        {
            var command = new Command("dmax");
            command.Description = "Provides operations to call the dmax method.";
            var builder = new DmaxRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dmin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDminNavCommand()
        {
            var command = new Command("dmin");
            command.Description = "Provides operations to call the dmin method.";
            var builder = new DminRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dollarDe method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDollarDeNavCommand()
        {
            var command = new Command("dollar-de");
            command.Description = "Provides operations to call the dollarDe method.";
            var builder = new DollarDeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dollarFr method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDollarFrNavCommand()
        {
            var command = new Command("dollar-fr");
            command.Description = "Provides operations to call the dollarFr method.";
            var builder = new DollarFrRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dollar method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDollarNavCommand()
        {
            var command = new Command("dollar");
            command.Description = "Provides operations to call the dollar method.";
            var builder = new DollarRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dproduct method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDproductNavCommand()
        {
            var command = new Command("dproduct");
            command.Description = "Provides operations to call the dproduct method.";
            var builder = new DproductRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dstDev method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDstDevNavCommand()
        {
            var command = new Command("dst-dev");
            command.Description = "Provides operations to call the dstDev method.";
            var builder = new DstDevRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dstDevP method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDstDevPNavCommand()
        {
            var command = new Command("dst-dev-p");
            command.Description = "Provides operations to call the dstDevP method.";
            var builder = new DstDevPRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dsum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDsumNavCommand()
        {
            var command = new Command("dsum");
            command.Description = "Provides operations to call the dsum method.";
            var builder = new DsumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the duration method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDurationNavCommand()
        {
            var command = new Command("duration");
            command.Description = "Provides operations to call the duration method.";
            var builder = new DurationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dvar method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDvarNavCommand()
        {
            var command = new Command("dvar");
            command.Description = "Provides operations to call the dvar method.";
            var builder = new DvarRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the dvarP method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDvarPNavCommand()
        {
            var command = new Command("dvar-p");
            command.Description = "Provides operations to call the dvarP method.";
            var builder = new DvarPRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ecma_Ceiling method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEcma_CeilingNavCommand()
        {
            var command = new Command("ecma_-ceiling");
            command.Description = "Provides operations to call the ecma_Ceiling method.";
            var builder = new Ecma_CeilingRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the edate method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEdateNavCommand()
        {
            var command = new Command("edate");
            command.Description = "Provides operations to call the edate method.";
            var builder = new EdateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the effect method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEffectNavCommand()
        {
            var command = new Command("effect");
            command.Description = "Provides operations to call the effect method.";
            var builder = new EffectRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the eoMonth method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEoMonthNavCommand()
        {
            var command = new Command("eo-month");
            command.Description = "Provides operations to call the eoMonth method.";
            var builder = new EoMonthRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the erf_Precise method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildErf_PreciseNavCommand()
        {
            var command = new Command("erf_-precise");
            command.Description = "Provides operations to call the erf_Precise method.";
            var builder = new Erf_PreciseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the erfC_Precise method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildErfC_PreciseNavCommand()
        {
            var command = new Command("erf-c_-precise");
            command.Description = "Provides operations to call the erfC_Precise method.";
            var builder = new ErfC_PreciseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the erfC method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildErfCNavCommand()
        {
            var command = new Command("erf-c");
            command.Description = "Provides operations to call the erfC method.";
            var builder = new ErfCRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the erf method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildErfNavCommand()
        {
            var command = new Command("erf");
            command.Description = "Provides operations to call the erf method.";
            var builder = new ErfRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the error_Type method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildError_TypeNavCommand()
        {
            var command = new Command("error_-type");
            command.Description = "Provides operations to call the error_Type method.";
            var builder = new Error_TypeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the even method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildEvenNavCommand()
        {
            var command = new Command("even");
            command.Description = "Provides operations to call the even method.";
            var builder = new EvenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the exact method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExactNavCommand()
        {
            var command = new Command("exact");
            command.Description = "Provides operations to call the exact method.";
            var builder = new ExactRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the exp method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExpNavCommand()
        {
            var command = new Command("exp");
            command.Description = "Provides operations to call the exp method.";
            var builder = new ExpRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the expon_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildExpon_DistNavCommand()
        {
            var command = new Command("expon_-dist");
            command.Description = "Provides operations to call the expon_Dist method.";
            var builder = new Expon_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the f_Dist_RT method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildF_Dist_RTNavCommand()
        {
            var command = new Command("f_-dist_-r-t");
            command.Description = "Provides operations to call the f_Dist_RT method.";
            var builder = new F_Dist_RTRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the f_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildF_DistNavCommand()
        {
            var command = new Command("f_-dist");
            command.Description = "Provides operations to call the f_Dist method.";
            var builder = new F_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the f_Inv_RT method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildF_Inv_RTNavCommand()
        {
            var command = new Command("f_-inv_-r-t");
            command.Description = "Provides operations to call the f_Inv_RT method.";
            var builder = new F_Inv_RTRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the f_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildF_InvNavCommand()
        {
            var command = new Command("f_-inv");
            command.Description = "Provides operations to call the f_Inv method.";
            var builder = new F_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the factDouble method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFactDoubleNavCommand()
        {
            var command = new Command("fact-double");
            command.Description = "Provides operations to call the factDouble method.";
            var builder = new FactDoubleRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the fact method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFactNavCommand()
        {
            var command = new Command("fact");
            command.Description = "Provides operations to call the fact method.";
            var builder = new FactRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the false method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFalseNavCommand()
        {
            var command = new Command("false");
            command.Description = "Provides operations to call the false method.";
            var builder = new FalseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the findB method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFindBNavCommand()
        {
            var command = new Command("find-b");
            command.Description = "Provides operations to call the findB method.";
            var builder = new FindBRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the find method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFindNavCommand()
        {
            var command = new Command("find");
            command.Description = "Provides operations to call the find method.";
            var builder = new FindRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the fisherInv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFisherInvNavCommand()
        {
            var command = new Command("fisher-inv");
            command.Description = "Provides operations to call the fisherInv method.";
            var builder = new FisherInvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the fisher method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFisherNavCommand()
        {
            var command = new Command("fisher");
            command.Description = "Provides operations to call the fisher method.";
            var builder = new FisherRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the fixed method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFixedNavCommand()
        {
            var command = new Command("fixed");
            command.Description = "Provides operations to call the fixed method.";
            var builder = new FixedRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the floor_Math method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFloor_MathNavCommand()
        {
            var command = new Command("floor_-math");
            command.Description = "Provides operations to call the floor_Math method.";
            var builder = new Floor_MathRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the floor_Precise method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFloor_PreciseNavCommand()
        {
            var command = new Command("floor_-precise");
            command.Description = "Provides operations to call the floor_Precise method.";
            var builder = new Floor_PreciseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the fv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFvNavCommand()
        {
            var command = new Command("fv");
            command.Description = "Provides operations to call the fv method.";
            var builder = new FvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the fvschedule method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildFvscheduleNavCommand()
        {
            var command = new Command("fvschedule");
            command.Description = "Provides operations to call the fvschedule method.";
            var builder = new FvscheduleRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gamma_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGamma_DistNavCommand()
        {
            var command = new Command("gamma_-dist");
            command.Description = "Provides operations to call the gamma_Dist method.";
            var builder = new Gamma_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gamma_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGamma_InvNavCommand()
        {
            var command = new Command("gamma_-inv");
            command.Description = "Provides operations to call the gamma_Inv method.";
            var builder = new Gamma_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gammaLn_Precise method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGammaLn_PreciseNavCommand()
        {
            var command = new Command("gamma-ln_-precise");
            command.Description = "Provides operations to call the gammaLn_Precise method.";
            var builder = new GammaLn_PreciseRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gammaLn method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGammaLnNavCommand()
        {
            var command = new Command("gamma-ln");
            command.Description = "Provides operations to call the gammaLn method.";
            var builder = new GammaLnRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gamma method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGammaNavCommand()
        {
            var command = new Command("gamma");
            command.Description = "Provides operations to call the gamma method.";
            var builder = new GammaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gauss method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGaussNavCommand()
        {
            var command = new Command("gauss");
            command.Description = "Provides operations to call the gauss method.";
            var builder = new GaussRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the gcd method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGcdNavCommand()
        {
            var command = new Command("gcd");
            command.Description = "Provides operations to call the gcd method.";
            var builder = new GcdRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the geoMean method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGeoMeanNavCommand()
        {
            var command = new Command("geo-mean");
            command.Description = "Provides operations to call the geoMean method.";
            var builder = new GeoMeanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the geStep method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGeStepNavCommand()
        {
            var command = new Command("ge-step");
            command.Description = "Provides operations to call the geStep method.";
            var builder = new GeStepRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Get functions from drives
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Get functions from drives";
            var driveIdOption = new Option<string>("--drive-id", description: "The unique identifier of drive") {
            };
            driveIdOption.IsRequired = true;
            command.AddOption(driveIdOption);
            var driveItemIdOption = new Option<string>("--drive-item-id", description: "The unique identifier of driveItem") {
            };
            driveItemIdOption.IsRequired = true;
            command.AddOption(driveItemIdOption);
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var driveId = invocationContext.ParseResult.GetValueForOption(driveIdOption);
                var driveItemId = invocationContext.ParseResult.GetValueForOption(driveItemIdOption);
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                if (driveId is not null) requestInfo.PathParameters.Add("drive%2Did", driveId);
                if (driveItemId is not null) requestInfo.PathParameters.Add("driveItem%2Did", driveItemId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the harMean method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHarMeanNavCommand()
        {
            var command = new Command("har-mean");
            command.Description = "Provides operations to call the harMean method.";
            var builder = new HarMeanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hex2Bin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHex2BinNavCommand()
        {
            var command = new Command("hex2-bin");
            command.Description = "Provides operations to call the hex2Bin method.";
            var builder = new Hex2BinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hex2Dec method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHex2DecNavCommand()
        {
            var command = new Command("hex2-dec");
            command.Description = "Provides operations to call the hex2Dec method.";
            var builder = new Hex2DecRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hex2Oct method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHex2OctNavCommand()
        {
            var command = new Command("hex2-oct");
            command.Description = "Provides operations to call the hex2Oct method.";
            var builder = new Hex2OctRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hlookup method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHlookupNavCommand()
        {
            var command = new Command("hlookup");
            command.Description = "Provides operations to call the hlookup method.";
            var builder = new HlookupRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hour method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHourNavCommand()
        {
            var command = new Command("hour");
            command.Description = "Provides operations to call the hour method.";
            var builder = new HourRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hyperlink method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHyperlinkNavCommand()
        {
            var command = new Command("hyperlink");
            command.Description = "Provides operations to call the hyperlink method.";
            var builder = new HyperlinkRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the hypGeom_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildHypGeom_DistNavCommand()
        {
            var command = new Command("hyp-geom_-dist");
            command.Description = "Provides operations to call the hypGeom_Dist method.";
            var builder = new HypGeom_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the if method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIfNavCommand()
        {
            var command = new Command("if");
            command.Description = "Provides operations to call the if method.";
            var builder = new IfRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imAbs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImAbsNavCommand()
        {
            var command = new Command("im-abs");
            command.Description = "Provides operations to call the imAbs method.";
            var builder = new ImAbsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imaginary method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImaginaryNavCommand()
        {
            var command = new Command("imaginary");
            command.Description = "Provides operations to call the imaginary method.";
            var builder = new ImaginaryRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imArgument method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImArgumentNavCommand()
        {
            var command = new Command("im-argument");
            command.Description = "Provides operations to call the imArgument method.";
            var builder = new ImArgumentRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imConjugate method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImConjugateNavCommand()
        {
            var command = new Command("im-conjugate");
            command.Description = "Provides operations to call the imConjugate method.";
            var builder = new ImConjugateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imCosh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImCoshNavCommand()
        {
            var command = new Command("im-cosh");
            command.Description = "Provides operations to call the imCosh method.";
            var builder = new ImCoshRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imCos method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImCosNavCommand()
        {
            var command = new Command("im-cos");
            command.Description = "Provides operations to call the imCos method.";
            var builder = new ImCosRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imCot method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImCotNavCommand()
        {
            var command = new Command("im-cot");
            command.Description = "Provides operations to call the imCot method.";
            var builder = new ImCotRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imCsch method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImCschNavCommand()
        {
            var command = new Command("im-csch");
            command.Description = "Provides operations to call the imCsch method.";
            var builder = new ImCschRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imCsc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImCscNavCommand()
        {
            var command = new Command("im-csc");
            command.Description = "Provides operations to call the imCsc method.";
            var builder = new ImCscRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imDiv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImDivNavCommand()
        {
            var command = new Command("im-div");
            command.Description = "Provides operations to call the imDiv method.";
            var builder = new ImDivRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imExp method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImExpNavCommand()
        {
            var command = new Command("im-exp");
            command.Description = "Provides operations to call the imExp method.";
            var builder = new ImExpRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imLn method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImLnNavCommand()
        {
            var command = new Command("im-ln");
            command.Description = "Provides operations to call the imLn method.";
            var builder = new ImLnRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imLog10 method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImLog10NavCommand()
        {
            var command = new Command("im-log10");
            command.Description = "Provides operations to call the imLog10 method.";
            var builder = new ImLog10RequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imLog2 method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImLog2NavCommand()
        {
            var command = new Command("im-log2");
            command.Description = "Provides operations to call the imLog2 method.";
            var builder = new ImLog2RequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imPower method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImPowerNavCommand()
        {
            var command = new Command("im-power");
            command.Description = "Provides operations to call the imPower method.";
            var builder = new ImPowerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imProduct method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImProductNavCommand()
        {
            var command = new Command("im-product");
            command.Description = "Provides operations to call the imProduct method.";
            var builder = new ImProductRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imReal method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImRealNavCommand()
        {
            var command = new Command("im-real");
            command.Description = "Provides operations to call the imReal method.";
            var builder = new ImRealRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSech method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSechNavCommand()
        {
            var command = new Command("im-sech");
            command.Description = "Provides operations to call the imSech method.";
            var builder = new ImSechRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSec method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSecNavCommand()
        {
            var command = new Command("im-sec");
            command.Description = "Provides operations to call the imSec method.";
            var builder = new ImSecRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSinh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSinhNavCommand()
        {
            var command = new Command("im-sinh");
            command.Description = "Provides operations to call the imSinh method.";
            var builder = new ImSinhRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSinNavCommand()
        {
            var command = new Command("im-sin");
            command.Description = "Provides operations to call the imSin method.";
            var builder = new ImSinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSqrt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSqrtNavCommand()
        {
            var command = new Command("im-sqrt");
            command.Description = "Provides operations to call the imSqrt method.";
            var builder = new ImSqrtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSub method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSubNavCommand()
        {
            var command = new Command("im-sub");
            command.Description = "Provides operations to call the imSub method.";
            var builder = new ImSubRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imSum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImSumNavCommand()
        {
            var command = new Command("im-sum");
            command.Description = "Provides operations to call the imSum method.";
            var builder = new ImSumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the imTan method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildImTanNavCommand()
        {
            var command = new Command("im-tan");
            command.Description = "Provides operations to call the imTan method.";
            var builder = new ImTanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the int method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIntNavCommand()
        {
            var command = new Command("int");
            command.Description = "Provides operations to call the int method.";
            var builder = new IntRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the intRate method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIntRateNavCommand()
        {
            var command = new Command("int-rate");
            command.Description = "Provides operations to call the intRate method.";
            var builder = new IntRateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ipmt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIpmtNavCommand()
        {
            var command = new Command("ipmt");
            command.Description = "Provides operations to call the ipmt method.";
            var builder = new IpmtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the irr method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIrrNavCommand()
        {
            var command = new Command("irr");
            command.Description = "Provides operations to call the irr method.";
            var builder = new IrrRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isErr method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsErrNavCommand()
        {
            var command = new Command("is-err");
            command.Description = "Provides operations to call the isErr method.";
            var builder = new IsErrRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isError method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsErrorNavCommand()
        {
            var command = new Command("is-error");
            command.Description = "Provides operations to call the isError method.";
            var builder = new IsErrorRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isEven method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsEvenNavCommand()
        {
            var command = new Command("is-even");
            command.Description = "Provides operations to call the isEven method.";
            var builder = new IsEvenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isFormula method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsFormulaNavCommand()
        {
            var command = new Command("is-formula");
            command.Description = "Provides operations to call the isFormula method.";
            var builder = new IsFormulaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isLogical method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsLogicalNavCommand()
        {
            var command = new Command("is-logical");
            command.Description = "Provides operations to call the isLogical method.";
            var builder = new IsLogicalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isNA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsNANavCommand()
        {
            var command = new Command("is-n-a");
            command.Description = "Provides operations to call the isNA method.";
            var builder = new IsNARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isNonText method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsNonTextNavCommand()
        {
            var command = new Command("is-non-text");
            command.Description = "Provides operations to call the isNonText method.";
            var builder = new IsNonTextRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isNumber method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsNumberNavCommand()
        {
            var command = new Command("is-number");
            command.Description = "Provides operations to call the isNumber method.";
            var builder = new IsNumberRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the iso_Ceiling method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIso_CeilingNavCommand()
        {
            var command = new Command("iso_-ceiling");
            command.Description = "Provides operations to call the iso_Ceiling method.";
            var builder = new Iso_CeilingRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isOdd method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsOddNavCommand()
        {
            var command = new Command("is-odd");
            command.Description = "Provides operations to call the isOdd method.";
            var builder = new IsOddRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isoWeekNum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsoWeekNumNavCommand()
        {
            var command = new Command("iso-week-num");
            command.Description = "Provides operations to call the isoWeekNum method.";
            var builder = new IsoWeekNumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ispmt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIspmtNavCommand()
        {
            var command = new Command("ispmt");
            command.Description = "Provides operations to call the ispmt method.";
            var builder = new IspmtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isref method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsrefNavCommand()
        {
            var command = new Command("isref");
            command.Description = "Provides operations to call the isref method.";
            var builder = new IsrefRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the isText method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildIsTextNavCommand()
        {
            var command = new Command("is-text");
            command.Description = "Provides operations to call the isText method.";
            var builder = new IsTextRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the kurt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildKurtNavCommand()
        {
            var command = new Command("kurt");
            command.Description = "Provides operations to call the kurt method.";
            var builder = new KurtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the large method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLargeNavCommand()
        {
            var command = new Command("large");
            command.Description = "Provides operations to call the large method.";
            var builder = new LargeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the lcm method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLcmNavCommand()
        {
            var command = new Command("lcm");
            command.Description = "Provides operations to call the lcm method.";
            var builder = new LcmRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the leftb method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLeftbNavCommand()
        {
            var command = new Command("leftb");
            command.Description = "Provides operations to call the leftb method.";
            var builder = new LeftbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the left method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLeftNavCommand()
        {
            var command = new Command("left");
            command.Description = "Provides operations to call the left method.";
            var builder = new LeftRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the lenb method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLenbNavCommand()
        {
            var command = new Command("lenb");
            command.Description = "Provides operations to call the lenb method.";
            var builder = new LenbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the len method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLenNavCommand()
        {
            var command = new Command("len");
            command.Description = "Provides operations to call the len method.";
            var builder = new LenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ln method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLnNavCommand()
        {
            var command = new Command("ln");
            command.Description = "Provides operations to call the ln method.";
            var builder = new LnRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the log10 method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLog10NavCommand()
        {
            var command = new Command("log10");
            command.Description = "Provides operations to call the log10 method.";
            var builder = new Log10RequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the log method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLogNavCommand()
        {
            var command = new Command("log");
            command.Description = "Provides operations to call the log method.";
            var builder = new LogRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the logNorm_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLogNorm_DistNavCommand()
        {
            var command = new Command("log-norm_-dist");
            command.Description = "Provides operations to call the logNorm_Dist method.";
            var builder = new LogNorm_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the logNorm_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLogNorm_InvNavCommand()
        {
            var command = new Command("log-norm_-inv");
            command.Description = "Provides operations to call the logNorm_Inv method.";
            var builder = new LogNorm_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the lookup method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLookupNavCommand()
        {
            var command = new Command("lookup");
            command.Description = "Provides operations to call the lookup method.";
            var builder = new LookupRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the lower method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildLowerNavCommand()
        {
            var command = new Command("lower");
            command.Description = "Provides operations to call the lower method.";
            var builder = new LowerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the match method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMatchNavCommand()
        {
            var command = new Command("match");
            command.Description = "Provides operations to call the match method.";
            var builder = new MatchRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the maxA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMaxANavCommand()
        {
            var command = new Command("max-a");
            command.Description = "Provides operations to call the maxA method.";
            var builder = new MaxARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the max method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMaxNavCommand()
        {
            var command = new Command("max");
            command.Description = "Provides operations to call the max method.";
            var builder = new MaxRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the mduration method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMdurationNavCommand()
        {
            var command = new Command("mduration");
            command.Description = "Provides operations to call the mduration method.";
            var builder = new MdurationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the median method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMedianNavCommand()
        {
            var command = new Command("median");
            command.Description = "Provides operations to call the median method.";
            var builder = new MedianRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the midb method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMidbNavCommand()
        {
            var command = new Command("midb");
            command.Description = "Provides operations to call the midb method.";
            var builder = new MidbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the mid method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMidNavCommand()
        {
            var command = new Command("mid");
            command.Description = "Provides operations to call the mid method.";
            var builder = new MidRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the minA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMinANavCommand()
        {
            var command = new Command("min-a");
            command.Description = "Provides operations to call the minA method.";
            var builder = new MinARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the min method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMinNavCommand()
        {
            var command = new Command("min");
            command.Description = "Provides operations to call the min method.";
            var builder = new MinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the minute method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMinuteNavCommand()
        {
            var command = new Command("minute");
            command.Description = "Provides operations to call the minute method.";
            var builder = new MinuteRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the mirr method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMirrNavCommand()
        {
            var command = new Command("mirr");
            command.Description = "Provides operations to call the mirr method.";
            var builder = new MirrRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the mod method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildModNavCommand()
        {
            var command = new Command("mod");
            command.Description = "Provides operations to call the mod method.";
            var builder = new ModRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the month method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMonthNavCommand()
        {
            var command = new Command("month");
            command.Description = "Provides operations to call the month method.";
            var builder = new MonthRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the mround method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMroundNavCommand()
        {
            var command = new Command("mround");
            command.Description = "Provides operations to call the mround method.";
            var builder = new MroundRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the multiNomial method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildMultiNomialNavCommand()
        {
            var command = new Command("multi-nomial");
            command.Description = "Provides operations to call the multiNomial method.";
            var builder = new MultiNomialRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the na method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNaNavCommand()
        {
            var command = new Command("na");
            command.Description = "Provides operations to call the na method.";
            var builder = new NaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the negBinom_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNegBinom_DistNavCommand()
        {
            var command = new Command("neg-binom_-dist");
            command.Description = "Provides operations to call the negBinom_Dist method.";
            var builder = new NegBinom_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the networkDays_Intl method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNetworkDays_IntlNavCommand()
        {
            var command = new Command("network-days_-intl");
            command.Description = "Provides operations to call the networkDays_Intl method.";
            var builder = new NetworkDays_IntlRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the networkDays method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNetworkDaysNavCommand()
        {
            var command = new Command("network-days");
            command.Description = "Provides operations to call the networkDays method.";
            var builder = new NetworkDaysRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the n method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNNavCommand()
        {
            var command = new Command("n");
            command.Description = "Provides operations to call the n method.";
            var builder = new NRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the nominal method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNominalNavCommand()
        {
            var command = new Command("nominal");
            command.Description = "Provides operations to call the nominal method.";
            var builder = new NominalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the norm_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNorm_DistNavCommand()
        {
            var command = new Command("norm_-dist");
            command.Description = "Provides operations to call the norm_Dist method.";
            var builder = new Norm_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the norm_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNorm_InvNavCommand()
        {
            var command = new Command("norm_-inv");
            command.Description = "Provides operations to call the norm_Inv method.";
            var builder = new Norm_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the norm_S_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNorm_S_DistNavCommand()
        {
            var command = new Command("norm_-s_-dist");
            command.Description = "Provides operations to call the norm_S_Dist method.";
            var builder = new Norm_S_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the norm_S_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNorm_S_InvNavCommand()
        {
            var command = new Command("norm_-s_-inv");
            command.Description = "Provides operations to call the norm_S_Inv method.";
            var builder = new Norm_S_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the not method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNotNavCommand()
        {
            var command = new Command("not");
            command.Description = "Provides operations to call the not method.";
            var builder = new NotRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the now method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNowNavCommand()
        {
            var command = new Command("now");
            command.Description = "Provides operations to call the now method.";
            var builder = new NowRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the nper method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNperNavCommand()
        {
            var command = new Command("nper");
            command.Description = "Provides operations to call the nper method.";
            var builder = new NperRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the npv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNpvNavCommand()
        {
            var command = new Command("npv");
            command.Description = "Provides operations to call the npv method.";
            var builder = new NpvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the numberValue method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildNumberValueNavCommand()
        {
            var command = new Command("number-value");
            command.Description = "Provides operations to call the numberValue method.";
            var builder = new NumberValueRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oct2Bin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOct2BinNavCommand()
        {
            var command = new Command("oct2-bin");
            command.Description = "Provides operations to call the oct2Bin method.";
            var builder = new Oct2BinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oct2Dec method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOct2DecNavCommand()
        {
            var command = new Command("oct2-dec");
            command.Description = "Provides operations to call the oct2Dec method.";
            var builder = new Oct2DecRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oct2Hex method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOct2HexNavCommand()
        {
            var command = new Command("oct2-hex");
            command.Description = "Provides operations to call the oct2Hex method.";
            var builder = new Oct2HexRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oddFPrice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOddFPriceNavCommand()
        {
            var command = new Command("odd-f-price");
            command.Description = "Provides operations to call the oddFPrice method.";
            var builder = new OddFPriceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oddFYield method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOddFYieldNavCommand()
        {
            var command = new Command("odd-f-yield");
            command.Description = "Provides operations to call the oddFYield method.";
            var builder = new OddFYieldRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oddLPrice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOddLPriceNavCommand()
        {
            var command = new Command("odd-l-price");
            command.Description = "Provides operations to call the oddLPrice method.";
            var builder = new OddLPriceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the oddLYield method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOddLYieldNavCommand()
        {
            var command = new Command("odd-l-yield");
            command.Description = "Provides operations to call the oddLYield method.";
            var builder = new OddLYieldRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the odd method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOddNavCommand()
        {
            var command = new Command("odd");
            command.Description = "Provides operations to call the odd method.";
            var builder = new OddRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the or method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildOrNavCommand()
        {
            var command = new Command("or");
            command.Description = "Provides operations to call the or method.";
            var builder = new OrRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Update the navigation property functions in drives
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Update the navigation property functions in drives";
            var driveIdOption = new Option<string>("--drive-id", description: "The unique identifier of drive") {
            };
            driveIdOption.IsRequired = true;
            command.AddOption(driveIdOption);
            var driveItemIdOption = new Option<string>("--drive-item-id", description: "The unique identifier of driveItem") {
            };
            driveItemIdOption.IsRequired = true;
            command.AddOption(driveItemIdOption);
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var driveId = invocationContext.ParseResult.GetValueForOption(driveIdOption);
                var driveItemId = invocationContext.ParseResult.GetValueForOption(driveItemIdOption);
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNode("application/json", stream);
                var model = parseNode.GetObjectValue<WorkbookFunctions>(WorkbookFunctions.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                });
                if (driveId is not null) requestInfo.PathParameters.Add("drive%2Did", driveId);
                if (driveItemId is not null) requestInfo.PathParameters.Add("driveItem%2Did", driveItemId);
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Provides operations to call the pduration method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPdurationNavCommand()
        {
            var command = new Command("pduration");
            command.Description = "Provides operations to call the pduration method.";
            var builder = new PdurationRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the percentile_Exc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPercentile_ExcNavCommand()
        {
            var command = new Command("percentile_-exc");
            command.Description = "Provides operations to call the percentile_Exc method.";
            var builder = new Percentile_ExcRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the percentile_Inc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPercentile_IncNavCommand()
        {
            var command = new Command("percentile_-inc");
            command.Description = "Provides operations to call the percentile_Inc method.";
            var builder = new Percentile_IncRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the percentRank_Exc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPercentRank_ExcNavCommand()
        {
            var command = new Command("percent-rank_-exc");
            command.Description = "Provides operations to call the percentRank_Exc method.";
            var builder = new PercentRank_ExcRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the percentRank_Inc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPercentRank_IncNavCommand()
        {
            var command = new Command("percent-rank_-inc");
            command.Description = "Provides operations to call the percentRank_Inc method.";
            var builder = new PercentRank_IncRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the permutationa method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPermutationaNavCommand()
        {
            var command = new Command("permutationa");
            command.Description = "Provides operations to call the permutationa method.";
            var builder = new PermutationaRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the permut method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPermutNavCommand()
        {
            var command = new Command("permut");
            command.Description = "Provides operations to call the permut method.";
            var builder = new PermutRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the phi method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPhiNavCommand()
        {
            var command = new Command("phi");
            command.Description = "Provides operations to call the phi method.";
            var builder = new PhiRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the pi method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPiNavCommand()
        {
            var command = new Command("pi");
            command.Description = "Provides operations to call the pi method.";
            var builder = new PiRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the pmt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPmtNavCommand()
        {
            var command = new Command("pmt");
            command.Description = "Provides operations to call the pmt method.";
            var builder = new PmtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the poisson_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPoisson_DistNavCommand()
        {
            var command = new Command("poisson_-dist");
            command.Description = "Provides operations to call the poisson_Dist method.";
            var builder = new Poisson_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the power method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPowerNavCommand()
        {
            var command = new Command("power");
            command.Description = "Provides operations to call the power method.";
            var builder = new PowerRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the ppmt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPpmtNavCommand()
        {
            var command = new Command("ppmt");
            command.Description = "Provides operations to call the ppmt method.";
            var builder = new PpmtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the priceDisc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPriceDiscNavCommand()
        {
            var command = new Command("price-disc");
            command.Description = "Provides operations to call the priceDisc method.";
            var builder = new PriceDiscRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the priceMat method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPriceMatNavCommand()
        {
            var command = new Command("price-mat");
            command.Description = "Provides operations to call the priceMat method.";
            var builder = new PriceMatRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the price method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPriceNavCommand()
        {
            var command = new Command("price");
            command.Description = "Provides operations to call the price method.";
            var builder = new PriceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the product method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildProductNavCommand()
        {
            var command = new Command("product");
            command.Description = "Provides operations to call the product method.";
            var builder = new ProductRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the proper method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildProperNavCommand()
        {
            var command = new Command("proper");
            command.Description = "Provides operations to call the proper method.";
            var builder = new ProperRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the pv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPvNavCommand()
        {
            var command = new Command("pv");
            command.Description = "Provides operations to call the pv method.";
            var builder = new PvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the quartile_Exc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildQuartile_ExcNavCommand()
        {
            var command = new Command("quartile_-exc");
            command.Description = "Provides operations to call the quartile_Exc method.";
            var builder = new Quartile_ExcRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the quartile_Inc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildQuartile_IncNavCommand()
        {
            var command = new Command("quartile_-inc");
            command.Description = "Provides operations to call the quartile_Inc method.";
            var builder = new Quartile_IncRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the quotient method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildQuotientNavCommand()
        {
            var command = new Command("quotient");
            command.Description = "Provides operations to call the quotient method.";
            var builder = new QuotientRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the radians method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRadiansNavCommand()
        {
            var command = new Command("radians");
            command.Description = "Provides operations to call the radians method.";
            var builder = new RadiansRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the randBetween method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRandBetweenNavCommand()
        {
            var command = new Command("rand-between");
            command.Description = "Provides operations to call the randBetween method.";
            var builder = new RandBetweenRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rand method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRandNavCommand()
        {
            var command = new Command("rand");
            command.Description = "Provides operations to call the rand method.";
            var builder = new RandRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rank_Avg method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRank_AvgNavCommand()
        {
            var command = new Command("rank_-avg");
            command.Description = "Provides operations to call the rank_Avg method.";
            var builder = new Rank_AvgRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rank_Eq method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRank_EqNavCommand()
        {
            var command = new Command("rank_-eq");
            command.Description = "Provides operations to call the rank_Eq method.";
            var builder = new Rank_EqRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rate method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRateNavCommand()
        {
            var command = new Command("rate");
            command.Description = "Provides operations to call the rate method.";
            var builder = new RateRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the received method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReceivedNavCommand()
        {
            var command = new Command("received");
            command.Description = "Provides operations to call the received method.";
            var builder = new ReceivedRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the replaceB method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReplaceBNavCommand()
        {
            var command = new Command("replace-b");
            command.Description = "Provides operations to call the replaceB method.";
            var builder = new ReplaceBRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the replace method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReplaceNavCommand()
        {
            var command = new Command("replace");
            command.Description = "Provides operations to call the replace method.";
            var builder = new ReplaceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rept method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildReptNavCommand()
        {
            var command = new Command("rept");
            command.Description = "Provides operations to call the rept method.";
            var builder = new ReptRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rightb method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRightbNavCommand()
        {
            var command = new Command("rightb");
            command.Description = "Provides operations to call the rightb method.";
            var builder = new RightbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the right method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRightNavCommand()
        {
            var command = new Command("right");
            command.Description = "Provides operations to call the right method.";
            var builder = new RightRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the roman method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRomanNavCommand()
        {
            var command = new Command("roman");
            command.Description = "Provides operations to call the roman method.";
            var builder = new RomanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the roundDown method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoundDownNavCommand()
        {
            var command = new Command("round-down");
            command.Description = "Provides operations to call the roundDown method.";
            var builder = new RoundDownRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the round method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoundNavCommand()
        {
            var command = new Command("round");
            command.Description = "Provides operations to call the round method.";
            var builder = new RoundRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the roundUp method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRoundUpNavCommand()
        {
            var command = new Command("round-up");
            command.Description = "Provides operations to call the roundUp method.";
            var builder = new RoundUpRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rows method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRowsNavCommand()
        {
            var command = new Command("rows");
            command.Description = "Provides operations to call the rows method.";
            var builder = new RowsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the rri method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildRriNavCommand()
        {
            var command = new Command("rri");
            command.Description = "Provides operations to call the rri method.";
            var builder = new RriRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sech method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSechNavCommand()
        {
            var command = new Command("sech");
            command.Description = "Provides operations to call the sech method.";
            var builder = new SechRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sec method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSecNavCommand()
        {
            var command = new Command("sec");
            command.Description = "Provides operations to call the sec method.";
            var builder = new SecRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the second method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSecondNavCommand()
        {
            var command = new Command("second");
            command.Description = "Provides operations to call the second method.";
            var builder = new SecondRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the seriesSum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSeriesSumNavCommand()
        {
            var command = new Command("series-sum");
            command.Description = "Provides operations to call the seriesSum method.";
            var builder = new SeriesSumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sheet method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSheetNavCommand()
        {
            var command = new Command("sheet");
            command.Description = "Provides operations to call the sheet method.";
            var builder = new SheetRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sheets method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSheetsNavCommand()
        {
            var command = new Command("sheets");
            command.Description = "Provides operations to call the sheets method.";
            var builder = new SheetsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sign method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSignNavCommand()
        {
            var command = new Command("sign");
            command.Description = "Provides operations to call the sign method.";
            var builder = new SignRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sinh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSinhNavCommand()
        {
            var command = new Command("sinh");
            command.Description = "Provides operations to call the sinh method.";
            var builder = new SinhRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sin method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSinNavCommand()
        {
            var command = new Command("sin");
            command.Description = "Provides operations to call the sin method.";
            var builder = new SinRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the skew_p method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSkew_pNavCommand()
        {
            var command = new Command("skew_p");
            command.Description = "Provides operations to call the skew_p method.";
            var builder = new Skew_pRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the skew method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSkewNavCommand()
        {
            var command = new Command("skew");
            command.Description = "Provides operations to call the skew method.";
            var builder = new SkewRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sln method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSlnNavCommand()
        {
            var command = new Command("sln");
            command.Description = "Provides operations to call the sln method.";
            var builder = new SlnRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the small method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSmallNavCommand()
        {
            var command = new Command("small");
            command.Description = "Provides operations to call the small method.";
            var builder = new SmallRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sqrt method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSqrtNavCommand()
        {
            var command = new Command("sqrt");
            command.Description = "Provides operations to call the sqrt method.";
            var builder = new SqrtRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sqrtPi method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSqrtPiNavCommand()
        {
            var command = new Command("sqrt-pi");
            command.Description = "Provides operations to call the sqrtPi method.";
            var builder = new SqrtPiRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the standardize method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStandardizeNavCommand()
        {
            var command = new Command("standardize");
            command.Description = "Provides operations to call the standardize method.";
            var builder = new StandardizeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the stDev_P method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStDev_PNavCommand()
        {
            var command = new Command("st-dev_-p");
            command.Description = "Provides operations to call the stDev_P method.";
            var builder = new StDev_PRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the stDev_S method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStDev_SNavCommand()
        {
            var command = new Command("st-dev_-s");
            command.Description = "Provides operations to call the stDev_S method.";
            var builder = new StDev_SRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the stDevA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStDevANavCommand()
        {
            var command = new Command("st-dev-a");
            command.Description = "Provides operations to call the stDevA method.";
            var builder = new StDevARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the stDevPA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildStDevPANavCommand()
        {
            var command = new Command("st-dev-p-a");
            command.Description = "Provides operations to call the stDevPA method.";
            var builder = new StDevPARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the substitute method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSubstituteNavCommand()
        {
            var command = new Command("substitute");
            command.Description = "Provides operations to call the substitute method.";
            var builder = new SubstituteRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the subtotal method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSubtotalNavCommand()
        {
            var command = new Command("subtotal");
            command.Description = "Provides operations to call the subtotal method.";
            var builder = new SubtotalRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sumIf method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSumIfNavCommand()
        {
            var command = new Command("sum-if");
            command.Description = "Provides operations to call the sumIf method.";
            var builder = new SumIfRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sumIfs method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSumIfsNavCommand()
        {
            var command = new Command("sum-ifs");
            command.Description = "Provides operations to call the sumIfs method.";
            var builder = new SumIfsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSumNavCommand()
        {
            var command = new Command("sum");
            command.Description = "Provides operations to call the sum method.";
            var builder = new SumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the sumSq method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSumSqNavCommand()
        {
            var command = new Command("sum-sq");
            command.Description = "Provides operations to call the sumSq method.";
            var builder = new SumSqRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the syd method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildSydNavCommand()
        {
            var command = new Command("syd");
            command.Description = "Provides operations to call the syd method.";
            var builder = new SydRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the t_Dist_2T method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildT_Dist_2TNavCommand()
        {
            var command = new Command("t_-dist_2-t");
            command.Description = "Provides operations to call the t_Dist_2T method.";
            var builder = new T_Dist_2TRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the t_Dist_RT method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildT_Dist_RTNavCommand()
        {
            var command = new Command("t_-dist_-r-t");
            command.Description = "Provides operations to call the t_Dist_RT method.";
            var builder = new T_Dist_RTRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the t_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildT_DistNavCommand()
        {
            var command = new Command("t_-dist");
            command.Description = "Provides operations to call the t_Dist method.";
            var builder = new T_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the t_Inv_2T method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildT_Inv_2TNavCommand()
        {
            var command = new Command("t_-inv_2-t");
            command.Description = "Provides operations to call the t_Inv_2T method.";
            var builder = new T_Inv_2TRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the t_Inv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildT_InvNavCommand()
        {
            var command = new Command("t_-inv");
            command.Description = "Provides operations to call the t_Inv method.";
            var builder = new T_InvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the tanh method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTanhNavCommand()
        {
            var command = new Command("tanh");
            command.Description = "Provides operations to call the tanh method.";
            var builder = new TanhRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the tan method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTanNavCommand()
        {
            var command = new Command("tan");
            command.Description = "Provides operations to call the tan method.";
            var builder = new TanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the tbillEq method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTbillEqNavCommand()
        {
            var command = new Command("tbill-eq");
            command.Description = "Provides operations to call the tbillEq method.";
            var builder = new TbillEqRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the tbillPrice method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTbillPriceNavCommand()
        {
            var command = new Command("tbill-price");
            command.Description = "Provides operations to call the tbillPrice method.";
            var builder = new TbillPriceRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the tbillYield method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTbillYieldNavCommand()
        {
            var command = new Command("tbill-yield");
            command.Description = "Provides operations to call the tbillYield method.";
            var builder = new TbillYieldRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the text method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTextNavCommand()
        {
            var command = new Command("text");
            command.Description = "Provides operations to call the text method.";
            var builder = new TextRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the time method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTimeNavCommand()
        {
            var command = new Command("time");
            command.Description = "Provides operations to call the time method.";
            var builder = new TimeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the timevalue method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTimevalueNavCommand()
        {
            var command = new Command("timevalue");
            command.Description = "Provides operations to call the timevalue method.";
            var builder = new TimevalueRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the t method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTNavCommand()
        {
            var command = new Command("t");
            command.Description = "Provides operations to call the t method.";
            var builder = new TRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the today method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTodayNavCommand()
        {
            var command = new Command("today");
            command.Description = "Provides operations to call the today method.";
            var builder = new TodayRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the trimMean method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTrimMeanNavCommand()
        {
            var command = new Command("trim-mean");
            command.Description = "Provides operations to call the trimMean method.";
            var builder = new TrimMeanRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the trim method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTrimNavCommand()
        {
            var command = new Command("trim");
            command.Description = "Provides operations to call the trim method.";
            var builder = new TrimRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the true method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTrueNavCommand()
        {
            var command = new Command("true");
            command.Description = "Provides operations to call the true method.";
            var builder = new TrueRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the trunc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTruncNavCommand()
        {
            var command = new Command("trunc");
            command.Description = "Provides operations to call the trunc method.";
            var builder = new TruncRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the type method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildTypeNavCommand()
        {
            var command = new Command("type");
            command.Description = "Provides operations to call the type method.";
            var builder = new TypeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the unichar method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUnicharNavCommand()
        {
            var command = new Command("unichar");
            command.Description = "Provides operations to call the unichar method.";
            var builder = new UnicharRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the unicode method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUnicodeNavCommand()
        {
            var command = new Command("unicode");
            command.Description = "Provides operations to call the unicode method.";
            var builder = new UnicodeRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the upper method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUpperNavCommand()
        {
            var command = new Command("upper");
            command.Description = "Provides operations to call the upper method.";
            var builder = new UpperRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the usdollar method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildUsdollarNavCommand()
        {
            var command = new Command("usdollar");
            command.Description = "Provides operations to call the usdollar method.";
            var builder = new UsdollarRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the value method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildValueNavCommand()
        {
            var command = new Command("value");
            command.Description = "Provides operations to call the value method.";
            var builder = new ValueRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the var_P method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVar_PNavCommand()
        {
            var command = new Command("var_-p");
            command.Description = "Provides operations to call the var_P method.";
            var builder = new Var_PRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the var_S method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVar_SNavCommand()
        {
            var command = new Command("var_-s");
            command.Description = "Provides operations to call the var_S method.";
            var builder = new Var_SRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the varA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVarANavCommand()
        {
            var command = new Command("var-a");
            command.Description = "Provides operations to call the varA method.";
            var builder = new VarARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the varPA method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVarPANavCommand()
        {
            var command = new Command("var-p-a");
            command.Description = "Provides operations to call the varPA method.";
            var builder = new VarPARequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the vdb method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVdbNavCommand()
        {
            var command = new Command("vdb");
            command.Description = "Provides operations to call the vdb method.";
            var builder = new VdbRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the vlookup method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildVlookupNavCommand()
        {
            var command = new Command("vlookup");
            command.Description = "Provides operations to call the vlookup method.";
            var builder = new VlookupRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the weekday method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWeekdayNavCommand()
        {
            var command = new Command("weekday");
            command.Description = "Provides operations to call the weekday method.";
            var builder = new WeekdayRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the weekNum method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWeekNumNavCommand()
        {
            var command = new Command("week-num");
            command.Description = "Provides operations to call the weekNum method.";
            var builder = new WeekNumRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the weibull_Dist method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWeibull_DistNavCommand()
        {
            var command = new Command("weibull_-dist");
            command.Description = "Provides operations to call the weibull_Dist method.";
            var builder = new Weibull_DistRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the workDay_Intl method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWorkDay_IntlNavCommand()
        {
            var command = new Command("work-day_-intl");
            command.Description = "Provides operations to call the workDay_Intl method.";
            var builder = new WorkDay_IntlRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the workDay method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildWorkDayNavCommand()
        {
            var command = new Command("work-day");
            command.Description = "Provides operations to call the workDay method.";
            var builder = new WorkDayRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the xirr method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildXirrNavCommand()
        {
            var command = new Command("xirr");
            command.Description = "Provides operations to call the xirr method.";
            var builder = new XirrRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the xnpv method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildXnpvNavCommand()
        {
            var command = new Command("xnpv");
            command.Description = "Provides operations to call the xnpv method.";
            var builder = new XnpvRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the xor method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildXorNavCommand()
        {
            var command = new Command("xor");
            command.Description = "Provides operations to call the xor method.";
            var builder = new XorRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the yearFrac method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildYearFracNavCommand()
        {
            var command = new Command("year-frac");
            command.Description = "Provides operations to call the yearFrac method.";
            var builder = new YearFracRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the year method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildYearNavCommand()
        {
            var command = new Command("year");
            command.Description = "Provides operations to call the year method.";
            var builder = new YearRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the yieldDisc method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildYieldDiscNavCommand()
        {
            var command = new Command("yield-disc");
            command.Description = "Provides operations to call the yieldDisc method.";
            var builder = new YieldDiscRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the yieldMat method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildYieldMatNavCommand()
        {
            var command = new Command("yield-mat");
            command.Description = "Provides operations to call the yieldMat method.";
            var builder = new YieldMatRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the yield method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildYieldNavCommand()
        {
            var command = new Command("yield");
            command.Description = "Provides operations to call the yield method.";
            var builder = new YieldRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the z_Test method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildZ_TestNavCommand()
        {
            var command = new Command("z_-test");
            command.Description = "Provides operations to call the z_Test method.";
            var builder = new Z_TestRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="FunctionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public FunctionsRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/functions{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="FunctionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public FunctionsRequestBuilder(string rawUrl) : base("{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/functions{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Delete navigation property functions for drives
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get functions from drives
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<FunctionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<FunctionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the navigation property functions in drives
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(WorkbookFunctions body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(WorkbookFunctions body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get functions from drives
        /// </summary>
        public class FunctionsRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
