// <auto-generated/>
using ApiSdk.DeviceAppManagement.MobileApps.Item.Assign;
using ApiSdk.DeviceAppManagement.MobileApps.Item.Assignments;
using ApiSdk.DeviceAppManagement.MobileApps.Item.Categories;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphAndroidLobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphAndroidStoreApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphIosLobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphIosStoreApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphIosVppApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphMacOSDmgApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphMacOSLobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphManagedAndroidLobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphManagedIOSLobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphManagedMobileLobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphMicrosoftStoreForBusinessApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphWin32LobApp;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphWindowsAppX;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphWindowsMobileMSI;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphWindowsUniversalAppX;
using ApiSdk.DeviceAppManagement.MobileApps.Item.GraphWindowsWebApp;
using ApiSdk.Models.ODataErrors;
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.DeviceAppManagement.MobileApps.Item
{
    /// <summary>
    /// Provides operations to manage the mobileApps property of the microsoft.graph.deviceAppManagement entity.
    /// </summary>
    public class MobileAppItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Provides operations to manage the assignments property of the microsoft.graph.mobileApp entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAssignmentsNavCommand()
        {
            var command = new Command("assignments");
            command.Description = "Provides operations to manage the assignments property of the microsoft.graph.mobileApp entity.";
            var builder = new AssignmentsRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildCreateCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to call the assign method.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildAssignNavCommand()
        {
            var command = new Command("assign");
            command.Description = "Provides operations to call the assign method.";
            var builder = new AssignRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            execCommands.Add(builder.BuildPostCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Provides operations to manage the categories property of the microsoft.graph.mobileApp entity.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildCategoriesNavCommand()
        {
            var command = new Command("categories");
            command.Description = "Provides operations to manage the categories property of the microsoft.graph.mobileApp entity.";
            var builder = new CategoriesRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildCountNavCommand());
            execCommands.Add(builder.BuildListCommand());
            var cmds = builder.BuildCommand();
            execCommands.AddRange(cmds.Item1);
            nonExecCommands.AddRange(cmds.Item2);
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands.OrderBy(static c => c.Name, StringComparer.Ordinal))
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Deletes a iosLobApp.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/intune-apps-ioslobapp-delete?view=graph-rest-1.0" />
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "Deletes a iosLobApp.\n\nFind more info here:\n  https://learn.microsoft.com/graph/api/intune-apps-ioslobapp-delete?view=graph-rest-1.0";
            var mobileAppIdOption = new Option<string>("--mobile-app-id", description: "The unique identifier of mobileApp") {
            };
            mobileAppIdOption.IsRequired = true;
            command.AddOption(mobileAppIdOption);
            var ifMatchOption = new Option<string[]>("--if-match", description: "ETag") {
                Arity = ArgumentArity.ZeroOrMore
            };
            ifMatchOption.IsRequired = false;
            command.AddOption(ifMatchOption);
            command.SetHandler(async (invocationContext) => {
                var mobileAppId = invocationContext.ParseResult.GetValueForOption(mobileAppIdOption);
                var ifMatch = invocationContext.ParseResult.GetValueForOption(ifMatchOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                });
                if (mobileAppId is not null) requestInfo.PathParameters.Add("mobileApp%2Did", mobileAppId);
                if (ifMatch is not null) requestInfo.Headers.Add("If-Match", ifMatch);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Read properties and relationships of the windowsUniversalAppX object.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/intune-apps-windowsuniversalappx-get?view=graph-rest-1.0" />
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Read properties and relationships of the windowsUniversalAppX object.\n\nFind more info here:\n  https://learn.microsoft.com/graph/api/intune-apps-windowsuniversalappx-get?view=graph-rest-1.0";
            var mobileAppIdOption = new Option<string>("--mobile-app-id", description: "The unique identifier of mobileApp") {
            };
            mobileAppIdOption.IsRequired = true;
            command.AddOption(mobileAppIdOption);
            var selectOption = new Option<string[]>("--select", description: "Select properties to be returned") {
                Arity = ArgumentArity.ZeroOrMore
            };
            selectOption.IsRequired = false;
            command.AddOption(selectOption);
            var expandOption = new Option<string[]>("--expand", description: "Expand related entities") {
                Arity = ArgumentArity.ZeroOrMore
            };
            expandOption.IsRequired = false;
            command.AddOption(expandOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var mobileAppId = invocationContext.ParseResult.GetValueForOption(mobileAppIdOption);
                var select = invocationContext.ParseResult.GetValueForOption(selectOption);
                var expand = invocationContext.ParseResult.GetValueForOption(expandOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.Select = select;
                    q.QueryParameters.Expand = expand;
                });
                if (mobileAppId is not null) requestInfo.PathParameters.Add("mobileApp%2Did", mobileAppId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Casts the previous resource to androidLobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphAndroidLobAppByIdNavCommand()
        {
            var command = new Command("graph-android-lob-app-by-id");
            command.Description = "Casts the previous resource to androidLobApp.";
            var builder = new GraphAndroidLobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to androidStoreApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphAndroidStoreAppByIdNavCommand()
        {
            var command = new Command("graph-android-store-app-by-id");
            command.Description = "Casts the previous resource to androidStoreApp.";
            var builder = new GraphAndroidStoreAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to iosLobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphIosLobAppByIdNavCommand()
        {
            var command = new Command("graph-ios-lob-app-by-id");
            command.Description = "Casts the previous resource to iosLobApp.";
            var builder = new GraphIosLobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to iosStoreApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphIosStoreAppByIdNavCommand()
        {
            var command = new Command("graph-ios-store-app-by-id");
            command.Description = "Casts the previous resource to iosStoreApp.";
            var builder = new GraphIosStoreAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to iosVppApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphIosVppAppByIdNavCommand()
        {
            var command = new Command("graph-ios-vpp-app-by-id");
            command.Description = "Casts the previous resource to iosVppApp.";
            var builder = new GraphIosVppAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to macOSDmgApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphMacOSDmgAppByIdNavCommand()
        {
            var command = new Command("graph-mac-o-s-dmg-app-by-id");
            command.Description = "Casts the previous resource to macOSDmgApp.";
            var builder = new GraphMacOSDmgAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to macOSLobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphMacOSLobAppByIdNavCommand()
        {
            var command = new Command("graph-mac-o-s-lob-app-by-id");
            command.Description = "Casts the previous resource to macOSLobApp.";
            var builder = new GraphMacOSLobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to managedAndroidLobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphManagedAndroidLobAppByIdNavCommand()
        {
            var command = new Command("graph-managed-android-lob-app-by-id");
            command.Description = "Casts the previous resource to managedAndroidLobApp.";
            var builder = new GraphManagedAndroidLobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to managedIOSLobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphManagedIOSLobAppByIdNavCommand()
        {
            var command = new Command("graph-managed-i-o-s-lob-app-by-id");
            command.Description = "Casts the previous resource to managedIOSLobApp.";
            var builder = new GraphManagedIOSLobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to managedMobileLobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphManagedMobileLobAppByIdNavCommand()
        {
            var command = new Command("graph-managed-mobile-lob-app-by-id");
            command.Description = "Casts the previous resource to managedMobileLobApp.";
            var builder = new GraphManagedMobileLobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to microsoftStoreForBusinessApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphMicrosoftStoreForBusinessAppByIdNavCommand()
        {
            var command = new Command("graph-microsoft-store-for-business-app-by-id");
            command.Description = "Casts the previous resource to microsoftStoreForBusinessApp.";
            var builder = new GraphMicrosoftStoreForBusinessAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to win32LobApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphWin32LobAppByIdNavCommand()
        {
            var command = new Command("graph-win32-lob-app-by-id");
            command.Description = "Casts the previous resource to win32LobApp.";
            var builder = new GraphWin32LobAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to windowsAppX.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphWindowsAppXByIdNavCommand()
        {
            var command = new Command("graph-windows-app-x-by-id");
            command.Description = "Casts the previous resource to windowsAppX.";
            var builder = new GraphWindowsAppXRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to windowsMobileMSI.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphWindowsMobileMSIByIdNavCommand()
        {
            var command = new Command("graph-windows-mobile-m-s-i-by-id");
            command.Description = "Casts the previous resource to windowsMobileMSI.";
            var builder = new GraphWindowsMobileMSIRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to windowsUniversalAppX.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphWindowsUniversalAppXByIdNavCommand()
        {
            var command = new Command("graph-windows-universal-app-x-by-id");
            command.Description = "Casts the previous resource to windowsUniversalAppX.";
            var builder = new GraphWindowsUniversalAppXRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            nonExecCommands.Add(builder.BuildCommittedContainedAppsNavCommand());
            nonExecCommands.Add(builder.BuildContentVersionsNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Casts the previous resource to windowsWebApp.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGraphWindowsWebAppByIdNavCommand()
        {
            var command = new Command("graph-windows-web-app-by-id");
            command.Description = "Casts the previous resource to windowsWebApp.";
            var builder = new GraphWindowsWebAppRequestBuilder(PathParameters);
            var execCommands = new List<Command>();
            var nonExecCommands = new List<Command>();
            nonExecCommands.Add(builder.BuildAssignmentsNavCommand());
            nonExecCommands.Add(builder.BuildCategoriesNavCommand());
            execCommands.Add(builder.BuildGetCommand());
            foreach (var cmd in execCommands)
            {
                command.AddCommand(cmd);
            }
            foreach (var cmd in nonExecCommands)
            {
                command.AddCommand(cmd);
            }
            return command;
        }
        /// <summary>
        /// Update the properties of a windowsMicrosoftEdgeApp object.
        /// Find more info here <see href="https://learn.microsoft.com/graph/api/intune-apps-windowsmicrosoftedgeapp-update?view=graph-rest-1.0" />
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Update the properties of a windowsMicrosoftEdgeApp object.\n\nFind more info here:\n  https://learn.microsoft.com/graph/api/intune-apps-windowsmicrosoftedgeapp-update?view=graph-rest-1.0";
            var mobileAppIdOption = new Option<string>("--mobile-app-id", description: "The unique identifier of mobileApp") {
            };
            mobileAppIdOption.IsRequired = true;
            command.AddOption(mobileAppIdOption);
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var mobileAppId = invocationContext.ParseResult.GetValueForOption(mobileAppIdOption);
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNode("application/json", stream);
                var model = parseNode.GetObjectValue<MobileApp>(MobileApp.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                });
                if (mobileAppId is not null) requestInfo.PathParameters.Add("mobileApp%2Did", mobileAppId);
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"4XX", ODataError.CreateFromDiscriminatorValue},
                    {"5XX", ODataError.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="MobileAppItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public MobileAppItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/deviceAppManagement/mobileApps/{mobileApp%2Did}{?%24expand,%24select}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="MobileAppItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public MobileAppItemRequestBuilder(string rawUrl) : base("{+baseurl}/deviceAppManagement/mobileApps/{mobileApp%2Did}{?%24expand,%24select}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes a iosLobApp.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Read properties and relationships of the windowsUniversalAppX object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<MobileAppItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<MobileAppItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the properties of a windowsMicrosoftEdgeApp object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(MobileApp body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(MobileApp body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Read properties and relationships of the windowsUniversalAppX object.
        /// </summary>
        public class MobileAppItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
    }
}
