parameters:
  - name: rid
    type: string
    default:
  - name: certificateId
    type: string
    default:
  - name: signingServiceName
    type: string
    default:
  - name: pattern
    type: string
    default:
  - name: zipTemplate
    type: string
    default:
  - name: artifactsDownloadLocation
    type: string
    default:
  - name: version
    type: string
    default:

steps:
  - checkout: none
  - pwsh: |
      Write-Verbose -Verbose "rid = '${{ parameters.rid }}'"
      Write-Verbose -Verbose "certificateId = '${{ parameters.certificateId }}'"
      Write-Verbose -Verbose "signingServiceName = '${{ parameters.signingServiceName }}'"
      Write-Verbose -Verbose "pattern = '${{ parameters.pattern }}'"
      Write-Verbose -Verbose "zipTemplate = '${{ parameters.zipTemplate }}'"
      Write-Verbose -Verbose "artifactsDownloadLocation = '${{ parameters.artifactsDownloadLocation }}'"
      Write-Verbose -Verbose "version = '$(version)'"
  - ${{ if and(gt(length(parameters.certificateId), 0), contains(parameters.certificateId, 'CP')) }}:
    - task: DownloadPipelineArtifact@2
      inputs:
        patterns: build-output-${{parameters.rid}}/**/*
        path: $(artifactsDownloadLocation)/${{parameters.rid}}
    - pwsh: |
        # Get the archive name
        $downloadDir = Join-Path -Path '$(artifactsDownloadLocation)/${{parameters.rid}}/' -ChildPath 'build-output-${{parameters.rid}}'
        Get-ChildItem $downloadDir
        $zipName = '${{parameters.zipTemplate}}' -f '${{parameters.rid}}','$(version)'
        $zipPath = Join-Path -Path $downloadDir -ChildPath $zipName
        Write-Host $zipPath
        Expand-Archive -Path $zipPath -DestinationPath '../'
        Get-ChildItem $downloadDir
        Remove-Item $zipPath
      displayName: Extract zip
    - template: EsrpSign.yml
      parameters:
        buildOutputPath: $(artifactsDownloadLocation)/${{parameters.rid}}/*
        signOutputPath: $(Build.StagingDirectory)/signed/output
        certificateId: "`$(certificateId)"
        signingService: Graph Preview ESRP Mac Signing (Developer Certificate)
        pattern: $(pattern)
        useMinimatch: true
        shouldSign: true
        verifySignature: true
        alwaysCopy: true
        displayName: Sign packages
    - pwsh: |
        $zipName = '${{parameters.zipTemplate}}' -f '${{parameters.rid}}','$(version)'
        Compress-Archive -Path '$(Build.StagingDirectory)/signed/output/*' -DestinationPath ../$zipName
        Remove-Item '$(Build.StagingDirectory)/signed/original' -Force
      displayName: Compress signed files

    - task: PublishPipelineArtifact@1
      inputs:
        artifact: sign-output-${{parameters.rid}}
        path: $(Build.StagingDirectory)/signed
