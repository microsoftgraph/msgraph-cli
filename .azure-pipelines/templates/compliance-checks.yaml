parameters:
  - name: 'scanSource'
    type: boolean
    default: false
  - name: 'scanBinary'
    type: boolean
    default: false
  - name: buildOutputArtifact
    type: "string"
    default: ""

jobs:
  - job:
    displayName: Analysis tools
    pool:
      vmImage: windows-latest
    steps:
      - pwsh: |
          Write-Verbose -Verbose "scanSource = '${{parameters.scanSource}}'"
          Write-Verbose -Verbose "scanBinary = '${{parameters.scanBinary}}'"
          Write-Verbose -Verbose "buildOutputArtifact = '${{parameters.buildOutputArtifact}}'"
          Write-Verbose -Verbose 'Agent OS = $(Agent.OS)'
      - ${{ if gt(length(parameters.buildOutputArtifact), 0) }}:
        - download: current
          artifact: ${{parameters.buildOutputArtifact}}
      - task: UseDotNet@2
        displayName: 'Use .NET 6'
        inputs:
          version: 6.x

      - ${{ if eq(parameters.scanSource, true) }}:
        - task: PoliCheck@2
          displayName: 'Run PoliCheck'
          inputs:
            result: poli_result_src.xml
            optionsSEV: "1|2"
            targetArgument: $(Build.SourcesDirectory)/src
            termTypeL: English
            optionsPE: 2

        - task: CredScan@3
          displayName: 'Run CredScan'
          inputs:
            scanFolder: '$(Build.SourcesDirectory)\src'
            debugMode: false
            verboseOutput: true

      - ${{ if and(eq(parameters.scanBinary, true), gt(length(parameters.buildOutputArtifact), 0)) }}:
        - task: AntiMalware@3
          displayName: 'Run MpCmdRun.exe - Product Binaries'
          inputs:
            FileDirPath: $(Pipeline.Workspace)/${{parameters.buildOutputArtifact}}
            TreatSignatureUpdateFailureAs: Warning
            TreatStaleSignatureAs: Error

        - task: BinSkim@4
          displayName: 'Run BinSkim - Product Binaries'
          inputs:
            InputType: Basic
            TargetPattern: guardianGlob
            AnalyzeTargetGlob: '$(Pipeline.Workspace)\${{parameters.buildOutputArtifact}}\**.dll;$(Pipeline.Workspace)\${{parameters.buildOutputArtifact}}\**.exe;'
            AnalyzeIgnorePdbLoadError: false
            AnalyzeVerbose: true
            AnalyzeHashes: true
            AnalyzeEnvironment: false
            AnalyzeStatistics: true

        - task: PublishSecurityAnalysisLogs@3
          displayName: 'Publish Security Analysis Logs'
          inputs:
            ArtifactName: CodeAnalysisLogs
            BinSkim: true
            TargetPath: $(Build.ArtifactStagingDirectory)/security/logs

        - task: PostAnalysis@2
          displayName: 'Post Analysis'
          inputs:
            GdnBreakAllTools: true
        
        # - publish: $(Build.ArtifactStagingDirectory)/security/logs
        #   artifact: security-logs
