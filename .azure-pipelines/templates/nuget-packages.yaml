parameters:
  - name: 'useCache'
    type: boolean
    default: true
  - name: restorePath
    type: "string"
    default: $(Pipeline.Workspace)/.nuget/packages
  - name: vstsFeedName
    type: "string"
    default: "" # Format projectName/feedName for project scoped feeds, feedName for organization scoped feed
  - name: extraRestoreArgs
    type: "string"
    default:

steps:
  - pwsh: |
      Write-Verbose "useCache = '${{parameters.useCache}}'"
      Write-Verbose "restorePath = '${{parameters.restorePath}}'"
      Write-Verbose "extraRestoreArgs = '${{parameters.extraRestoreArgs}}'"

  - task: UseDotNet@2
    displayName: 'Use .NET 6'
    inputs:
      version: 6.x

  - ${{ if eq(parameters.useCache, true) }}:
    - task: Cache@2
      displayName: 'NuGet Cache'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
        path: '${{parameters.restorePath}}'
        cacheHitVar: 'CACHE_RESTORED'
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      condition: ne(variables.CACHE_RESTORED, true)
      inputs:
        command: restore
        ${{ if gt(length(parameters.vstsFeedName), 0) }}:
          feedsToUse: select
          feedRestore: ${{parameters.vstsFeedName}}
        includeNuGetOrg: true
        workingDirectory: $(Build.SourcesDirectory)
        restoreArguments: --use-lock-file --locked-mode ${{parameters.extraRestoreArgs}}
        restoreDirectory: ${{parameters.restorePath}}
  - ${{ else }}:
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      inputs:
        command: restore
        ${{ if gt(length(parameters.vstsFeedName), 0) }}:
          feedsToUse: select
          feedRestore: ${{parameters.vstsFeedName}}
        includeNuGetOrg: true
        workingDirectory: $(Build.SourcesDirectory)
        noCache: true
        restoreArguments: --use-lock-file --locked-mode ${{parameters.extraRestoreArgs}}