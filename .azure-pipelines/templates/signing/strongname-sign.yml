parameters:
  - name: "buildOutputPath"
    default: "$(Build.ArtifactStagingDirectory)\\build"
  - name: "signOutputPath"
    default: "$(Build.ArtifactStagingDirectory)\\signed"
  - name: "pattern"
    default: "*.dll,*.exe"
  - name: "certificateId"
    default: "CP-233863-SN"
  - name: "verifySignature"
    default: "true"
  - name: "pageHash"
    default: "true"
  - name: "displayName"
    default: "ESRP Signing"

steps:
- pwsh: |
    [string] $CertificateId = "${{ parameters.certificateId }}"
    Write-Verbose "CertificateId - $CertificateId" -Verbose

    [string] $VariableName = "EsrpJson"

    [string] $SigningServer = '$(SigningServer)'
    Write-Verbose "SigningServer - $SigningServer" -Verbose

    $esrp = @(@{
      keyCode       = $CertificateId
      operationCode = "StrongNameSign"
      parameters    = @{}
      toolName      = "sign"
      toolVersion   = "1.0"
    })

    if ("${{ parameters.verifySignature }}" -eq "true")
    {
      $esrp += @{
        keyCode       = $CertificateId
        operationCode = "StrongNameVerify"
        toolName      = "sign"
        toolVersion   = "1.0"
        }
    }

    $jsonString = $($esrp | ConvertTo-Json -Depth 99 -Compress)
    if ($esrp.Count -eq 1)
    {
      $jsonString = "[$jsonString]"
    }

    $vstsCommandString = "vso[task.setvariable variable=$VariableName]$jsonString"
    Write-Verbose -Message ("sending " + $vstsCommandString) -Verbose
    Write-Host "##$vstsCommandString"

    $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${{ parameters.signOutputPath }}"
    Write-Verbose -Message ("sending " + $vstsCommandString) -Verbose
    Write-Host "##$vstsCommandString"
  displayName: ${{ parameters.displayName }} - Generate Strong Name signing JSON
  condition: and(succeeded(), eq(variables['ESRP_TEMPLATE_SHOULD_SIGN'], 'True'), eq(variables['ESRP_TEMPLATE_CERT_ID'], 'CP-233863-SN'))
