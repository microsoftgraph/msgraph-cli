parameters:
  - name: executablePath
    type: "string"
    default: ''
  - name: executableName
    type: "string"
    default: mgc
  - name: certificateName
    type: "string"
    default: ''
  - name: zipName
    type: "string"
    default: unsigned.zip
  - name: targetRuntime
    type: "string"
    default: ''
  - name: enabled
    type: string
    default: 'false'

# Assumptions:
# The built zip has been downloaded already
steps:
  - pwsh: |
      Write-Host "##vso[task.setvariable variable=IS_ENABLED]${{ parameters.enabled }}"
    displayName: Check enabled
    condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=TARGET_RUNTIME]${{ parameters.targetRuntime }}"
      Write-Host "##vso[task.setvariable variable=CERTIFICATE_NAME]${{ parameters.certificateName }}"
      Write-Host "##vso[task.setvariable variable=EXECUTABLE_PATH]${{ parameters.executablePath }}"
      Write-Host "##vso[task.setvariable variable=EXECUTABLE_NAME]${{ parameters.executableName }}"
      Write-Host "##vso[task.setvariable variable=ZIP_NAME]${{ parameters.zipName }}"
    displayName: Resolve parameters
    condition: and(succeeded(), eq(variables['IS_ENABLED'], 'true'), eq(variables['SHOULD_SIGN'], 'True'))

  - task: PowerShell@2
    inputs:
      pwsh: true
      targetType: inline
      script: |
        Get-ChildItem -Path '$(EXECUTABLE_PATH)' -Recurse -Force -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName | Write-Verbose
        if (-not (Test-Path -Path '$(EXECUTABLE_PATH)/$(EXECUTABLE_NAME)')) {
          throw "The executable file '$(EXECUTABLE_PATH)/$(EXECUTABLE_NAME)' does not exist."
          echo "##vso[task.complete result=Failed;]"
        }
      verbosePreference: '$(OUTPUT_PREFERENCE)'
      debugPreference: '$(OUTPUT_PREFERENCE)'
      informationPreference: '$(OUTPUT_PREFERENCE)'
    displayName: Validate executable path location
    condition: and(succeeded(), eq(variables['IS_ENABLED'], 'true'), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['TARGET_RUNTIME'], 'osx'))

  - task: AzureKeyVault@2
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "MicrosofGraphKeyVault connection"
      KeyVaultName: MicrosofGraphKeyVault
      SecretsFilter: "graph-cli-apple-developer-certificate,graph-cli-apple-developer-certificate-password"
    condition: and(succeeded(), eq(variables['IS_ENABLED'], 'true'), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['TARGET_RUNTIME'], 'osx'))

  # Setting hardened entitlements is a requirement for Apple notarization
  - script: |
      set -e
      security create-keychain -p pwd $(agent.tempdirectory)/buildagent.keychain
      security default-keychain -s $(agent.tempdirectory)/buildagent.keychain
      security unlock-keychain -p pwd $(agent.tempdirectory)/buildagent.keychain
      echo "$(graph-cli-apple-developer-certificate)" | base64 -D > $(agent.tempdirectory)/cert.p12
      security import $(agent.tempdirectory)/cert.p12 -k $(agent.tempdirectory)/buildagent.keychain -P "$(graph-cli-apple-developer-certificate-password)" -T /usr/bin/codesign
      security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k pwd $(agent.tempdirectory)/buildagent.keychain
      codesign -s $(CERTIFICATE_NAME) --deep --force --options runtime --entitlements .azure-pipelines/darwin/entitlements.plist $(EXECUTABLE_PATH)/$(EXECUTABLE_NAME)
    displayName: Set Hardened Entitlements
    condition: and(succeeded(), eq(variables['IS_ENABLED'], 'true'), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['TARGET_RUNTIME'], 'osx'))

  - script: |
      set -e
      pushd $(EXECUTABLE_PATH) && zip -r -X $(EXECUTABLE_PATH)/$(ZIP_NAME) * && rm $(EXECUTABLE_NAME) && popd
    displayName: Archive build for submission
    condition: and(succeeded(), eq(variables['IS_ENABLED'], 'true'), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['TARGET_RUNTIME'], 'osx'))
