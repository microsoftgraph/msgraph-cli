# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none

pool:
  name: Azure Pipelines
  vmImage: windows-latest

variables:
  - name: ProductBinPath
    value: '$(System.DefaultWorkingDirectory)\assets'
  - name: sourceRepository
    value: 'microsoftgraph/msgraph-cli'
  - name: repositoryConnection
    value: 'GitHub - calebkiage'
  - name: zipTemplate
    value: msgraph-cli-win-x64-{0}.zip
parameters:
  - name: tag
    displayName: Tag
    type: string
    default: latest


# download -> scan -> zip -> upload
#          -> sign
#

stages:
- stage: download
  jobs:
    - job: download
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: none
      # Download GitHub Release
      # Downloads a GitHub Release from a repository
      - task: DownloadGitHubRelease@0
        inputs:
          connection: $(repositoryConnection)
          userRepository: $(sourceRepository)
          defaultVersionType: 'specificTag' # Options: latest, specificVersion, specificTag
          version: ${{ parameters.tag }} # Required when defaultVersionType != Latest
          itemPattern: '*-win-x64-*' # Optional
          downloadPath: '$(ProductBinPath)'
      - ${{ if startsWith(parameters.tag, 'v') }}:
        - script: echo "##vso[task.setvariable variable=cliVersion]$(echo ${{ parameters.tag }} | cut -c 2-)"
          name: setCliVersionStep
      - ${{ else }}:
        - script: echo "##vso[task.setvariable variable=cliVersion;isOutput=true]${{ parameters.tag }}"
          name: setCliVersionStep
      - script: |
          ZIP_TEMPLATE="$(zipTemplate)"
          CLI_VERSION="$(cliVersion)"
          ARCHIVE_NAME="$(format('$(zipTemplate)', '$(cliVersion)'))"
          echo "##vso[task.setvariable variable=cliArchiveName;isOutput=true]$ARCHIVE_NAME"
        name: setArchiveNameStep
      - script: unzip -j "$(Pipeline.Workspace)/download-zip/$(setArchiveNameStep.cliArchiveName)" -d $(Pipeline.Workspace)/download-zip/unzipped
      - publish: $(Pipeline.Workspace)/download-zip/unzipped
        artifact: unzipped


- stage: scan
  dependsOn: download
  variables:
    cliArchiveNameVar: $[ stageDependencies.download.download.outputs['setArchiveNameStep.cliArchiveName'] ]
  jobs:
    - job: scan
      steps:
      - checkout: none
      - download: current
        artifact: unzipped
      - task: AntiMalware@4
        displayName: 'Run MpCmdRun.exe - CLI Executable'
        inputs:
          FileDirPath: '$(Pipeline.Workspace)/unzipped'
      - task: BinSkim@4
        displayName: 'Run BinSkim - Product Binaries'
        inputs:
          InputType: Basic
          AnalyzeTargetGlob: '$(Pipeline.Workspace)\unzipped\*.exe'
          AnalyzeVerbose: true
          AnalyzeHashes: true
          AnalyzeEnvironment: false
      - task: PublishSecurityAnalysisLogs@3
        displayName: 'Publish Security Analysis Logs'
        inputs:
          ArtifactName: SecurityLogs

      - task: PostAnalysis@1
        displayName: 'Post Analysis'
        inputs:
          BinSkim: true
      - powershell: echo "##vso[task.setvariable variable=cliArchiveName;isOutput=true]$(cliArchiveNameVar)"
        name: setArchiveNameStep

- stage: sign
  dependsOn: download
  jobs:
    - job: esrpSign
      steps:
      - checkout: none
      - download: current
        artifact: unzipped
      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
        displayName: 'ESRP CodeSigning'
        inputs:
          ConnectedServiceName: 'microsoftgraph ESRP CodeSign DLL and NuGet (AKV)'
          FolderPath: '$(Pipeline.Workspace)\unzipped'
          signConfigType: inlineSignParams
          inlineOperation: |
            [
                {
                    "keyCode": "CP-230012",
                    "operationSetCode": "SigntoolSign",
                    "parameters": [
                    {
                        "parameterName": "OpusName",
                        "parameterValue": "Microsoft"
                    },
                    {
                        "parameterName": "OpusInfo",
                        "parameterValue": "http://www.microsoft.com"
                    },
                    {
                        "parameterName": "FileDigest",
                        "parameterValue": "/fd \"SHA256\""
                    },
                    {
                        "parameterName": "PageHash",
                        "parameterValue": "/NPH"
                    },
                    {
                        "parameterName": "TimeStamp",
                        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    }
                    ],
                    "toolName": "sign",
                    "toolVersion": "1.0"
                },
                {
                    "keyCode": "CP-230012",
                    "operationSetCode": "SigntoolVerify",
                    "parameters": [ ],
                    "toolName": "sign",
                    "toolVersion": "1.0"
                }
            ]
          SessionTimeout: 20
      - pwsh: |
          $env:NewDir = '$(Pipeline.Workspace)\sign-summary'
          New-Item -Path $env:NewDir -ItemType Directory -Force
          Get-ChildItem '$(Pipeline.Workspace)\unzipped\*.md' | Foreach-Object { Move-Item -Path $_.FullName -Destination $env:NewDir\$($_.Name) }
      - publish: $(Pipeline.Workspace)\sign-summary
        artifact: sign-summary
      - publish: $(Pipeline.Workspace)\unzipped
        artifact: signed-executable

- stage: zip
  dependsOn: [scan, sign]
  variables:
    cliArchiveNameVar: $[ stageDependencies.scan.scan.outputs['setArchiveNameStep.cliArchiveName'] ]
  jobs:
    - job: zip
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: none
      - download: current
        artifact: signed-executable
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Pipeline.Workspace)/signed-executable'
          includeRootFolder: false
          archiveType: 'zip' # Options: zip, 7z, tar, wim
          #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
          archiveFile: '$(Pipeline.Workspace)/signed-executable/$(cliArchiveNameVar)'
          replaceExistingArchive: true
          verbose: true
          quiet: false
      - publish: $(Pipeline.Workspace)/signed-executable/$(cliArchiveNameVar)
        artifact: zipped
      - script: echo "##vso[task.setvariable variable=cliArchiveName;isOutput=true]$(cliArchiveNameVar)"
        name: setArchiveNameStep

- stage: upload
  dependsOn: zip
  variables:
    cliArchiveName: $[ stageDependencies.zip.zip.outputs['setArchiveNameStep.cliArchiveName'] ]
  jobs:
    - job: upload
      steps:
      - checkout: none
      - download: current
        artifact: zipped
      - task: GithubRelease@1
        displayName: 'Edit GitHub Release'
        inputs:
          gitHubConnection: $(repositoryConnection)
          repositoryName: $(sourceRepository)
          action: edit
          isDraft: false
          addChangeLog: false
          assetUploadMode: replace
          releaseNotesSource: inline
          assets: $(Pipeline.Workspace)/zipped/**/$(cliArchiveName)
          isPreRelease: ${{ contains(parameters.tag, 'preview') }}
          tag: ${{ parameters.tag }}
