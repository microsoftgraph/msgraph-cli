name: Release CLI

trigger:
  branches:
    include:
      - refs/tags/v*

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
  - name: sourceRepository
    value: 'microsoftgraph/msgraph-cli'
  - name: repositoryConnection
    value: 'GitHub - calebkiage'
  - name: zipTemplate
    value: msgraph-cli-{0}-{1}.zip
  - name: buildConfiguration
    value: 'Release'
  - name: outputDir
    value: $(Build.ArtifactStagingDirectory)/publish
  - name: artifactsDownloadLocation
    value: $(Pipeline.Workspace)/artifacts
  - name: internalFeed
    value: "Graph Developer Experiences/microsoft-graph-packages" # Format projectName/feedName
  - name: versionString
    value: $[ coalesce('${{parameters.tag}}', '$(Build.SourceBranch)', 'v0.1.0') ]
  - group: ESRP

parameters:
  - name: tag
    displayName: Tag
    type: string
    default:

#                   
# test -> build -> | sign |
#                  |------| -> upload
# srcScan -------> | scan |
stages:
  - stage: test
    displayName: Run tests
    dependsOn: []
    jobs:
      - job: test
        displayName: Run tests
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 6'
          inputs:
            version: 6.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - task: DotNetCoreCLI@2
          displayName: Run tests
          enabled: true
          inputs:
            command: test
            workingDirectory: $(Build.SourcesDirectory)
            arguments: --no-restore
  - stage: build
    displayName: Build CLI
    dependsOn: [test]
    jobs:
      - job: prepare
        displayName: Prepare build
        steps:
          - pwsh: |
              # Get the version
              $version = '$(versionString)'
              $version = $version.TrimStart('refs/tags/').TrimStart('v')
              # Export version for use later
              Write-Host "##vso[task.setvariable variable=versionVar;isOutput=true]$version"
            name: version
      - job: build
        dependsOn: [prepare]
        displayName: Build and publish
        variables:
          version: $[ dependencies.prepare.outputs['version.versionVar'] ]
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
            'Linux-x64':
              rid: linux-x64
            'MacOS-x64':
              rid: osx-x64
            'MacOS-ARM':
              rid: osx-arm64
          # maxParallel: 2
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6'
            inputs:
              version: 6.x

          - template: templates/nuget-packages.yaml
            parameters:
              vstsFeedName: ${{variables.internalFeed}}

          - pwsh: dotnet publish --no-restore --runtime $(rid) --self-contained true --configuration $(buildConfiguration) --output $(outputDir)
            workingDirectory: $(Build.SourcesDirectory)
            displayName: DotNet publish

          - pwsh: |
              # Get the archive name
              $zipName = '$(zipTemplate)' -f '$(rid)','$(version)'

              $outputLocation = '$(outputDir)-$(rid)'
              # Ensure output directory exists
              New-Item $outputLocation -ItemType Directory -Force
              Compress-Archive -Path $(outputDir)/* -DestinationPath $outputLocation/$zipName
              Remove-Item '$(outputDir)/*'
            displayName: Compress published output

          - task: PublishPipelineArtifact@1
            inputs:
              artifact: build-output-$(rid)
              path: $(outputDir)-$(rid)

  - stage: srcScan
    displayName: Scan source code
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
      - job: scan
        displayName: Scanning source
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              scanSource: true
  - stage: sign
    displayName: ESRP signing
    pool:
      vmImage: windows-latest
    dependsOn: [build]
    variables:
      version: $[ stageDependencies.build.prepare.outputs['version.versionVar'] ]
    jobs:
      - job: esrpSignWin
        dependsOn: []
        displayName: ESRP Signing (Windows x64)
        steps:
          - template: templates/esrp-steps-template.yaml
            parameters:
              rid: win-x64
              certificateId: ​​CP-230012
              signingServiceName: microsoftgraph ESRP CodeSign DLL and NuGet (AKV)
              pattern: |
                **\*.exe
                **\*.dll
              artifactsDownloadLocation: ${{ variables.artifactsDownloadLocation }}
              version: ${{ variables.version }}
              zipTemplate: ${{ variables.zipTemplate }}
              
      - job: esrpSignMac
        dependsOn: []
        displayName: ESRP Signing (MacOS arm64)
        steps:
          - template: templates/esrp-steps-template.yaml
            parameters:
              rid: osx-arm64
              certificateId: CP-401337-Apple
              signingServiceName: microsoftgraph ESRP CodeSign DLL and NuGet (AKV)
              pattern: |
                **\*
              artifactsDownloadLocation: ${{ variables.artifactsDownloadLocation }}
              version: ${{ variables.version }}
              zipTemplate: ${{ variables.zipTemplate }}
  - stage: binaryScan
    displayName: Scan binaries (Anti malware, BinSkim)
    dependsOn: [build, srcScan]
    pool:
      vmImage: windows-latest
    jobs:
      - job: scan
        displayName: Scanning binaries
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              artifactsDownloadLocation: $(artifactsDownloadLocation)
              scanBinary: true

  - stage: upload
    dependsOn: [binaryScan, sign]
    jobs:
      - job: upload
        displayName: Upload binaries
        steps:
          - checkout: none
          - pwsh: |
              echo "TODO: Upload"
    