name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - refs/tags/v*
  paths:
    include:
    - .azure-pipelines
    - src
    - msgraph-cli.sln

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
  - name: repositoryConnection
    value: 'GitHub - calebkiage'
  - name: zipTemplate
    value: msgraph-cli-{0}-{1}.zip
  - name: buildConfiguration
    value: 'Release'
  - name: outputDir
    value: $(Build.ArtifactStagingDirectory)/publish
  - name: artifactsDownloadLocation
    value: $(Pipeline.Workspace)/artifacts
  - name: internalFeed
    value: "Graph Developer Experiences/microsoft-graph-packages" # Format projectName/feedName
  - name: powershellScriptsDir
    value: $(System.DefaultWorkingDirectory)/.azure-pipelines/powershell
  - name: branchOrTagName
    ${{ if in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/dev') }}:
      value: 'latest'
    ${{ else }}: # Version from the tag. Can be a branch name. Only mainline branches use latest
      value: '$(Build.SourceBranchName)'
  - group: ESRP

# test ----------> | build ->   |            |
#                  |            | sign       |
# checkFormat ----------------> |------------| -> upload
#                               | binaryScan |
# srcScan --------------------> |            |
stages:
  - stage: test
    displayName: Run tests
    dependsOn: []
    jobs:
      - job: test
        displayName: Run tests
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 7'
          inputs:
            version: 7.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - task: DotNetCoreCLI@2
          displayName: Run tests
          enabled: true
          inputs:
            command: test
            workingDirectory: $(Build.SourcesDirectory)
            arguments: --no-restore

  - stage: build
    displayName: Build CLI
    dependsOn: [test]
    jobs:
      - job: build
        displayName: Build and publish
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
            'Linux-x64':
              rid: linux-x64
            'MacOS-x64':
              rid: osx-x64
            'MacOS-ARM':
              rid: osx-arm64
          # maxParallel: 2
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 7'
            inputs:
              version: 7.x

          - template: templates/nuget-packages.yaml
            parameters:
              vstsFeedName: ${{variables.internalFeed}}

          - pwsh: dotnet publish --no-restore --runtime $(rid) --self-contained true --configuration $(buildConfiguration) --output $(outputDir)
            workingDirectory: $(Build.SourcesDirectory)
            displayName: DotNet publish

          - pwsh: |
              Import-Module $(powershellScriptsDir)/BuildTools.psm1
              Compress-BuildOutput -OutputDir '$(outputDir)-$(rid)' -SourceDir '$(outputDir)' -FileNameTemplate '$(zipTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)' -Cleanup
              Write-Host "##vso[task.setvariable variable=HAS_ARTIFACTS]True"
            # Only create artifacts if we're building a tag, building main, or building a PR targeting main
            condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'main')))
            displayName: Compress published output

          - task: PublishPipelineArtifact@1
            # Only publish artifacts if they exist
            condition: and(succeeded(), eq(variables['HAS_ARTIFACTS'], 'True'))
            inputs:
              artifact: build-output-$(rid)
              path: $(outputDir)-$(rid)

    # Format takes a long time. keep it in its own stage
  - stage: checkFormat
    displayName: Check formatting
    condition: false
    dependsOn: []
    jobs:
      - job: checkFormat
        displayName: Check formatting
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 7'
          inputs:
            version: 7.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - pwsh: dotnet format --no-restore --include ./src/ --exclude ./src/generated/ --verify-no-changes
          displayName: Validate formatting
          enabled: true

  - stage: srcScan
    displayName: Scan source code
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
      - job: scan
        displayName: Scanning source
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              scanSource: true

  - stage: sign
    displayName: ESRP signing
    pool:
      vmImage: windows-latest
    dependsOn: [build]
    # Only sign binaries if we're building a tag.
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    jobs:
      - job: esrpSign
        dependsOn: []
        variables:
          macSignOp: |
            [
                {
                    "keyCode": "CP-401337-Apple",
                    "OperationCode": "MacAppDeveloperSign",
                    "Parameters": {
                      "Hardening": "--options=runtime"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                }
            ]
          macNotarizeOp: |
            [
                {
                    "keyCode": "CP-401337-Apple",
                    "OperationCode": "MacAppNotarize",
                    "Parameters": {
                      "BundleId": "com.microsoft.microsoftgraphcli"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                }
            ]
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
              vmImage: windows-latest
              sign: true
              pattern: |
                **\*.exe
                **\*.dll
              inlineSignOperation: |
                [
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolSign",
                    "Parameters": {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolVerify",
                    "Parameters": {},
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
              inlineNotarizeOperation: ""
            'MacOS-x64':
              rid: osx-x64
              vmImage: macOS-11
              sign: true
              inlineSignOperation: ${{ variables.macSignOp }}
              inlineNotarizeOperation: ${{ variables.macNotarizeOp }}
            'MacOS-ARM':
              rid: osx-arm64
              vmImage: macOS-12
              sign: true
              inlineSignOperation: ${{ variables.macSignOp }}
              inlineNotarizeOperation: ${{ variables.macNotarizeOp }}
        displayName: ESRP Signing
        pool:
          vmImage: $(vmImage)
        steps:
          - pwsh: |
              Write-Verbose -Verbose 'pattern = ''$(pattern)'''
              Write-Verbose -Verbose 'zipTemplate = ''$(zipTemplate)'''
              Write-Verbose -Verbose 'artifactsDownloadLocation = ''$(artifactsDownloadLocation)'''
              Write-Verbose -Verbose 'sign = ''$(sign)'''
              Write-Verbose -Verbose 'inlineSignOperation = ''$(inlineSignOperation)'''
              Write-Verbose -Verbose 'inlineNotarizeOperation = ''$(inlineNotarizeOperation)'''
              $rid = '$(rid)'
              $shouldSign = '$(sign)'
              $notarizeOp = '$(inlineNotarizeOperation)'
              Write-Host "##vso[task.setvariable variable=RUNTIME_ID]$rid"
              Write-Host "##vso[task.setvariable variable=SHOULD_SIGN]$shouldSign"
              Write-Host "##vso[task.setvariable variable=NOTARIZE_OPERATION]$notarizeOp"
              Write-Host "##vso[task.setvariable variable=WORKING_DIR]$(artifactsDownloadLocation)/$(rid)"
            displayName: Setup variables

          - pwsh: git config --global core.longpaths true
            displayName: Enable git's long file paths on Windows

          - checkout: self

          - task: DownloadPipelineArtifact@2
            inputs:
              patterns: build-output-$(rid)/**/*
              path: $(WORKING_DIR)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

          - pwsh: |
              Import-Module $(powershellScriptsDir)/BuildTools.psm1
              $zipName = Get-ZipName -FileNameTemplate '$(zipTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)'
              Write-Host "##vso[task.setvariable variable=ZIP_NAME]$zipName"
            displayName: Compute zip name

          - pwsh: |
              Import-Module $(powershellScriptsDir)/BuildTools.psm1

              $downloadDir = Join-Path -Path '$(WORKING_DIR)' -ChildPath 'build-output-$(rid)'
              $extractPath = Join-Path -Path '$(WORKING_DIR)' -ChildPath artifacts
              Expand-EsrpArtifacts -SourceDir $downloadDir -OutputDir $extractPath -FileNameTemplate '$(zipTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)' -Cleanup

              Move-NonExecutableItems -SourcePath $extractPath -ExecutableItemNames mgc,mgc.exe
              Write-Host "##vso[task.setvariable variable=ARTIFACTS_PATH]$extractPath"
            displayName: Extract zip
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

          - template: templates/prepare-unsigned-executable-darwin.yaml
            parameters:
              executablePath: $(ARTIFACTS_PATH)
              executableName: mgc
              zipName: $(ZIP_NAME)
              targetRuntime: $(rid)

          - pwsh: |
              Write-Host "##vso[task.setvariable variable=ESRP_FILE_PATTERN]$(ZIP_NAME)"
            displayName: Compute ESRP filter pattern osx
            condition: and(succeeded(), startsWith(variables['RUNTIME_ID'], 'osx'))

          - pwsh: |
              Write-Host "##vso[task.setvariable variable=ESRP_FILE_PATTERN]$(pattern)"
            displayName: Compute ESRP filter pattern Windows
            condition: and(succeeded(), startsWith(variables['RUNTIME_ID'], 'win'))

          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning (Sign)'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(ARTIFACTS_PATH)
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: $(ESRP_FILE_PATTERN)
              inlineOperation: $(inlineSignOperation)
              SessionTimeout: 20
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning (Notarize)'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(ARTIFACTS_PATH)
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: $(ESRP_FILE_PATTERN)
              inlineOperation: $(inlineNotarizeOperation)
              SessionTimeout: 20
            condition: and(succeeded(), gt(length(variables['NOTARIZE_OPERATION']), 0), ne(variables['NOTARIZE_OPERATION'], '$(inlineNotarizeOperation)'), eq(variables['SHOULD_SIGN'], 'True'))

          - pwsh: |
              Import-Module $(powershellScriptsDir)/BuildTools.psm1
              Compress-SignedFiles -SourceDir '$(ARTIFACTS_PATH)' -ReportDir '$(WORKING_DIR)' -OutputFile '$(WORKING_DIR)/$(ZIP_NAME)' -Cleanup
              Get-ChildItem -Path '$(WORKING_DIR)' -Recurse -Force -ErrorAction SilentlyContinue | Select-Object FullName
            displayName: Compress signed files (Windows)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['RUNTIME_ID'], 'win'))

          - pwsh: |
              Import-Module $(powershellScriptsDir)/BuildTools.psm1
              $zipPath = Join-Path -Path '$(ARTIFACTS_PATH)' -ChildPath '$(ZIP_NAME)'
              Update-SignedArchive -InputFile $zipPath -ReportDir '$(WORKING_DIR)' -OutputFile '$(WORKING_DIR)/$(ZIP_NAME)' -Cleanup
              Get-ChildItem -Path '$(WORKING_DIR)' -Recurse -Force -ErrorAction SilentlyContinue | Select-Object FullName
            displayName: Update signed files (MacOS)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['RUNTIME_ID'], 'osx'))

          - task: PublishPipelineArtifact@1
            inputs:
              artifact: sign-output-$(rid)
              path: $(WORKING_DIR)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

  - stage: binaryScan
    displayName: Scan binaries (Anti malware, BinSkim)
    dependsOn: [build, checkFormat, srcScan]
    pool:
      vmImage: windows-latest
    # Only scan binaries if we're building a tag, building main, or building a PR targeting main
    condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'main')))
    jobs:
      - job: scan
        displayName: Scanning binaries
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              artifactsDownloadLocation: $(artifactsDownloadLocation)
              scanBinary: true

  - stage: upload
    dependsOn: [binaryScan, sign]
    # Only upload release if we're building a tag.
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    variables:
      currentTag: '$(branchOrTagName)'
      isPreRelease: $[ contains(variables.currentTag, 'preview') ]
    jobs:
      - job: upload
        displayName: Upload binaries
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              path: $(artifactsDownloadLocation)
          - task: GithubRelease@1
            displayName: 'Create GitHub Draft Release'
            inputs:
              gitHubConnection: $(repositoryConnection)
              repositoryName: '$(Build.Repository.Name)'
              action: create
              tagSource: 'gitTag'
              isDraft: true
              addChangeLog: true
              changeLogCompareToRelease: lastNonDraftRelease
              assets: |
                $(artifactsDownloadLocation)/build-output-linux-*/*.zip
                $(artifactsDownloadLocation)/sign-output-*/*.zip
              isPreRelease: $(isPreRelease)
