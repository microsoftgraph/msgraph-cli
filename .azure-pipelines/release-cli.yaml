name: Release CLI

trigger:
  branches:
    include:
      - refs/tags/v*

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
  - name: sourceRepository
    value: 'microsoftgraph/msgraph-cli'
  - name: repositoryConnection
    value: 'GitHub - calebkiage'
  - name: zipTemplate
    value: msgraph-cli-{0}-{1}.zip
  - name: buildConfiguration
    value: 'Release'
  - name: outputDir
    value: $(Build.ArtifactStagingDirectory)/publish
  - name: artifactsDownloadLocation
    value: $(Pipeline.Workspace)/artifacts
  - name: internalFeed
    value: "Graph Developer Experiences/microsoft-graph-packages" # Format projectName/feedName
  - name: signingServiceName
    value: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"

parameters:
  - name: tag
    displayName: Tag
    type: string
    default: latest

#                   
# test -> build -> | sign |
#                  |------| -> upload
# srcScan -------> | scan |
stages:
  - stage: test
    displayName: Run tests
    dependsOn: []
    jobs:
      - job: test
        displayName: Run tests
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 6'
          inputs:
            version: 6.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - task: DotNetCoreCLI@2
          displayName: Run tests
          enabled: true
          inputs:
            command: test
            workingDirectory: $(Build.SourcesDirectory)
            arguments: --no-restore
  - stage: build
    displayName: Build CLI
    dependsOn: [test]
    jobs:
      - job: build
        displayName: Build and publish
        # variables:
        #   PACKAGE_VERSION: ${{github.event.inputs.tag || github.ref_name || 'v0.1.0'}}
        #   PACKAGE_ZIP_TEMPLATE: "msgraph-cli-{0}-{1}.zip"
        strategy:
          matrix:
            'Win x64':
              rid: win-x64
              agentImage: windows-latest
            'Linux x64':
              rid: linux-x64
              agentImage: ubuntu-latest
            'MacOS x64':
              rid: osx-x64
              agentImage: macos-latest
            'MacOS ARM':
              rid: osx-arm64
              agentImage: macos-latest
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6'
            inputs:
              version: 6.x

          - template: templates/nuget-packages.yaml
            parameters:
              extraRestoreArgs: --runtime $(rid)
              vstsFeedName: ${{variables.internalFeed}}

          - task: DotNetCoreCLI@2
            displayName: Publish package
            enabled: true
            inputs:
              custom: publish
              command: custom
              workingDirectory: $(Build.SourcesDirectory)
              arguments: '--no-restore --runtime $(rid) --self-contained true --configuration $(buildConfiguration) --output $(outputDir)-$(rid)'
          - pwsh: $(outputDir)-$(rid)/mgc -h
            displayName: Test package

          - pwsh: Get-ChildItem $(outputDir)-* -Recurse

          - task: PublishPipelineArtifact@1
            inputs:
              artifact: build-output-$(rid)
              path: $(outputDir)-$(rid)

  - stage: srcScan
    displayName: Scan source code
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
      - job: scan
        displayName: Scanning source
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              scanSource: true
  - stage: sign
    displayName: ESRP signing
    pool:
      vmImage: windows-latest
    dependsOn: [build]
    jobs:
      - job: esrpSignWindows
        dependsOn: []
        displayName: ESRP Signing (Windows)
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              patterns: build-output-win*/**/*
              path: $(artifactsDownloadLocation)
          - pwsh: |
              Get-ChildItem $(artifactsDownloadLocation) -Recurse
          - template: templates/EsrpSign.yml
            parameters:
              buildOutputPath: $(artifactsDownloadLocation)
              signOutputPath: $(Build.StagingDirectory)\signed
              certificateId: $(AUTHENTICODE_CERT)
              signingService: ${{ variables.signingServiceName }}
              pattern: |
                **\*.exe
                **\*.dll
              useMinimatch: true
              shouldSign: true
              displayName: Sign Windows packages
      - job: esrpSignMacOS
        dependsOn: []
        displayName: ESRP Signing (MacOS)
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              patterns: build-output-osx*/**/*
              path: $(artifactsDownloadLocation)
          - pwsh: |
              Get-ChildItem $(artifactsDownloadLocation) -Recurse
          # - template: templates/EsrpSign.yml
          #   parameters:
          #     buildOutputPath: $(artifactsDownloadLocation)
          #     signOutputPath: $(Build.StagingDirectory)\signed
          #     certificateId: $(AUTHENTICODE_CERT)
          #     signingService: ${{ variables.signingServiceName }}
          #     pattern: |
          #       **\*.zip
          #     useMinimatch: true
          #     shouldSign: true
          #     displayName: Sign MacOS packages
  - stage: binaryScan
    displayName: Scan binaries (Anti malware, BinSkim)
    dependsOn: [build, srcScan]
    pool:
      vmImage: windows-latest
    jobs:
      - job: scan
        displayName: Scanning binaries
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              artifactsDownloadLocation: $(artifactsDownloadLocation)
              scanBinary: true

  - stage: upload
    dependsOn: [binaryScan, sign]
    jobs:
      - job: upload
        displayName: Upload binaries
        steps:
          - checkout: none
          - pwsh: |
              echo "TODO: Upload"
    