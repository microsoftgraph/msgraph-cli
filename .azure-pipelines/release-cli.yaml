name: Release CLI

trigger:
  branches:
    include:
      - refs/tags/v*

pr:
  branches:
    include:
      - main

# resources:
#   repositories:
#     - repository: MyGitHubRepo
#       type: github
#       endpoint: microsoftgraph (16)
#       name: microsoftgraph/msgraph-cli

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
  - name: sourceRepository
    value: 'microsoftgraph/msgraph-cli'
  - name: repositoryConnection
    value: 'GitHub - calebkiage'
  - name: zipTemplate
    value: msgraph-cli-{0}-{1}.zip
  - name: buildConfiguration
    value: 'Release'
  - name: outputDir
    value: $(Build.ArtifactStagingDirectory)/publish
  - name: artifactsDownloadLocation
    value: $(Pipeline.Workspace)/artifacts
  - name: internalFeed
    value: "Graph Developer Experiences/microsoft-graph-packages" # Format projectName/feedName
  - name: versionString
    value: $[ coalesce('$(Build.SourceBranchName)', 'latest') ]
    # value: $[ coalesce(replace('${{parameters.tag}}', 'none', ''), '$(Build.SourceBranchName)', 'v0.1.0') ]
  - group: ESRP

# parameters:
#   - name: tag
#     displayName: Tag
#     type: string
#     default: none

#                   
# test -> build -> | sign |
#                  |------| -> upload
# srcScan -------> | scan |
stages:
  - stage: test
    displayName: Run tests
    dependsOn: []
    jobs:
      - job: test
        displayName: Run tests
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 6'
          inputs:
            version: 6.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - task: DotNetCoreCLI@2
          displayName: Run tests
          enabled: true
          inputs:
            command: test
            workingDirectory: $(Build.SourcesDirectory)
            arguments: --no-restore
  - stage: build
    displayName: Build CLI
    dependsOn: [test]
    jobs:
      - job: prepare
        displayName: Prepare build
        steps:
          - pwsh: |
              # Get the version
              $version = '$(versionString)'
              $version = $version.TrimStart('refs/tags/').TrimStart('v')
              # Export version for use later
              Write-Host "##vso[task.setvariable variable=versionVar;isOutput=true]$version"
            name: version
      - job: build
        dependsOn: [prepare]
        displayName: Build and publish
        variables:
          version: $[ dependencies.prepare.outputs['version.versionVar'] ]
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
            'Linux-x64':
              rid: linux-x64
            'MacOS-x64':
              rid: osx-x64
            'MacOS-ARM':
              rid: osx-arm64
          # maxParallel: 2
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6'
            inputs:
              version: 6.x

          - template: templates/nuget-packages.yaml
            parameters:
              vstsFeedName: ${{variables.internalFeed}}

          - pwsh: dotnet publish --no-restore --runtime $(rid) --self-contained true --configuration $(buildConfiguration) --output $(outputDir)
            workingDirectory: $(Build.SourcesDirectory)
            displayName: DotNet publish

          - pwsh: |
              # Get the archive name
              $zipName = '$(zipTemplate)' -f '$(rid)','$(version)'

              $outputLocation = '$(outputDir)-$(rid)'
              # Ensure output directory exists
              New-Item $outputLocation -ItemType Directory -Force
              Compress-Archive -Path $(outputDir)/* -DestinationPath $outputLocation/$zipName
              Remove-Item '$(outputDir)/*'
            displayName: Compress published output

          - task: PublishPipelineArtifact@1
            inputs:
              artifact: build-output-$(rid)
              path: $(outputDir)-$(rid)

  - stage: srcScan
    displayName: Scan source code
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
      - job: scan
        displayName: Scanning source
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              scanSource: true

  - stage: sign
    displayName: ESRP signing
    pool:
      vmImage: windows-latest
    dependsOn: [build]
    variables:
      version: $[ stageDependencies.build.prepare.outputs['version.versionVar'] ]
    # condition: and(succeeded(), startsWith('$(Build.SourceBranch)', 'refs/tags/v'))
    jobs:
      - job: esrpSign
        dependsOn: []
        variables:
          macSignOp: |
            [
                {
                    "keyCode": "CP-401337-Apple",
                    "OperationCode": "MacAppDeveloperSign",
                    "Parameters": {
                      "Hardening": "--options=runtime"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                }
            ]
          macNotarizeOp: |
            [
                {
                    "keyCode": "CP-401337-Apple",
                    "OperationCode": "MacAppNotarize",
                    "Parameters": {
                      "BundleId": "com.microsoft.microsoftgraphcli"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                }
            ]
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
              sign: true
              pattern: |
                **\*.exe
                **\*.dll
              inlineSignOperation: |
                [
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolSign",
                    "Parameters": {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolVerify",
                    "Parameters": {},
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
              inlineNotarizeOperation: ""
            'MacOS-x64':
              rid: osx-x64
              sign: false
              pattern: |
                **\*.zip
              inlineSignOperation: ${{ variables.macSignOp }}
              inlineNotarizeOperation: ${{ variables.macNotarizeOp }}
            'MacOS-ARM':
              rid: osx-arm64
              sign: true
              pattern: |
                **\*.zip
              inlineSignOperation: ${{ variables.macSignOp }}
              inlineNotarizeOperation: ${{ variables.macNotarizeOp }}
        displayName: ESRP Signing
        steps:
          - pwsh: |
              Write-Verbose -Verbose 'pattern = ''$(pattern)'''
              Write-Verbose -Verbose 'zipTemplate = ''$(zipTemplate)'''
              Write-Verbose -Verbose 'artifactsDownloadLocation = ''$(artifactsDownloadLocation)'''
              Write-Verbose -Verbose 'version = ''$(version)'''
              Write-Verbose -Verbose 'sign = ''$(sign)'''
              Write-Verbose -Verbose 'inlineSignOperation = ''$(inlineSignOperation)'''
              Write-Verbose -Verbose 'inlineNotarizeOperation = ''$(inlineNotarizeOperation)'''
              $rid = '$(rid)'
              $shouldSign = '$(sign)'
              $notarizeOp = '$(inlineNotarizeOperation)'
              Write-Host "##vso[task.setvariable variable=RUNTIME_ID]$rid"
              Write-Host "##vso[task.setvariable variable=SHOULD_SIGN]$shouldSign"
              Write-Host "##vso[task.setvariable variable=NOTARIZE_OPERATION]$notarizeOp"
              Write-Host "##vso[task.setvariable variable=WORKING_DIR]$(artifactsDownloadLocation)/$(rid)"
          - task: DownloadPipelineArtifact@2
            inputs:
              patterns: build-output-$(rid)/**/*
              path: $(WORKING_DIR)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))
          - pwsh: |
              # Get the archive name
              $downloadDir = Join-Path -Path '$(WORKING_DIR)' -ChildPath 'build-output-$(rid)'
              Get-ChildItem $downloadDir
              $zipName = '$(zipTemplate)' -f '$(rid)','$(version)'
              $zipPath = Join-Path -Path $downloadDir -ChildPath $zipName
              Write-Host $zipPath
              $extractPath = Join-Path -Path '$(WORKING_DIR)' -ChildPath artifacts
              Expand-Archive -Path $zipPath -DestinationPath $extractPath
              Get-ChildItem $extractPath
              # -Force so there's no confirmation
              # -Recurse so the child items warning isn't shown
              Remove-Item $downloadDir -Recurse -Force
            displayName: Extract zip
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), not(startsWith(variables['RUNTIME_ID'], 'osx')))
          - pwsh: |
              # Get the archive name
              $downloadDir = Join-Path -Path '$(WORKING_DIR)' -ChildPath 'build-output-$(rid)'
              $extractPath = Join-Path -Path '$(WORKING_DIR)' -ChildPath artifacts
              Write-Host "Moving $downloadDir to $extractPath"
              Move-Item -Path $downloadDir -Destination $extractPath
              Get-ChildItem $extractPath -Recurse
            displayName: Move zip
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['RUNTIME_ID'], 'osx'))
          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(WORKING_DIR)/artifacts
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: |
                $(pattern)
              inlineOperation: $(inlineSignOperation)
              SessionTimeout: 20
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))
          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(WORKING_DIR)/artifacts
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: |
                $(pattern)
              inlineOperation: $(inlineNotarizeOperation)
              SessionTimeout: 20
            condition: and(succeeded(), gt(length(variables['NOTARIZE_OPERATION']), 0), ne(variables['NOTARIZE_OPERATION'], '$(inlineNotarizeOperation)'), eq(variables['SHOULD_SIGN'], 'True'))

          - pwsh: |
              $zipName = '$(zipTemplate)' -f '$(rid)','$(version)'
              Move-Item -Path '$(WORKING_DIR)/artifacts/*.md' -Destination ../
              Compress-Archive -Path '$(WORKING_DIR)/artifacts/*' -DestinationPath ../$zipName
              Remove-Item '$(WORKING_DIR)/artifacts' -Recurse -Force
              Get-ChildItem '$(WORKING_DIR)' -Recurse
            displayName: Compress signed files
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), not(startsWith(variables['RUNTIME_ID'], 'osx')))

          - pwsh: |
              Move-Item -Path '$(WORKING_DIR)/artifacts' -Destination ../
              Get-ChildItem '$(WORKING_DIR)' -Recurse
            displayName: Move signed files
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['RUNTIME_ID'], 'osx'))

          - task: PublishPipelineArtifact@1
            inputs:
              artifact: sign-output-$(rid)
              path: $(WORKING_DIR)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

  - stage: binaryScan
    displayName: Scan binaries (Anti malware, BinSkim)
    dependsOn: [build, srcScan]
    pool:
      vmImage: windows-latest
    condition: and(succeeded(), or(startsWith('$(Build.SourceBranch)', 'refs/tags/v'), eq('$(System.PullRequest.TargetBranch)', 'refs/tags/main')))
    jobs:
      - job: scan
        displayName: Scanning binaries
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              artifactsDownloadLocation: $(artifactsDownloadLocation)
              scanBinary: true

  - stage: upload
    dependsOn: [binaryScan, sign]
    condition: and(succeeded(), startsWith('$(Build.SourceBranch)', 'refs/tags/v'))
    # condition: and(succeeded(), or(startsWith('$(Build.SourceBranch)', 'refs/tags/v'), startsWith('${{parameters.tag}}', 'v')))
    jobs:
      - job: upload
        displayName: Upload binaries
        steps:
          - checkout: none
          - pwsh: |
              echo "TODO: Upload"
    