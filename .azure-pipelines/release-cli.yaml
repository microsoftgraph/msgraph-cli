name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - main
      - refs/tags/v*
  paths:
    include:
    - .azure-pipelines
    - src
    - msgraph-cli.sln

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
  - group: ESRP
  - name: repositoryConnection
    value: 'GitHub - calebkiage'
  - name: fileNameTemplate
    value: msgraph-cli-{0}-{1}
  - name: buildConfiguration
    value: 'Release'
  - name: outputDir
    value: $(Build.ArtifactStagingDirectory)/publish
  - name: artifactsDownloadLocation
    value: $(Pipeline.Workspace)/artifacts
  - name: internalFeed
    value: "Graph Developer Experiences/microsoft-graph-packages" # Format projectName/feedName
  - name: powershellScriptsDir
    value: $(System.DefaultWorkingDirectory)/.azure-pipelines/powershell
  - name: branchOrTagName
    ${{ if in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/dev') }}:
      value: 'latest'
    ${{ else }}: # Version from the tag. Can be a branch name. Only mainline branches use latest
      value: '$(Build.SourceBranchName)'

parameters:
  - name: forceSignOutput
    displayName: Force Signing Build Output
    type: boolean
    default: false
  - name: notarizeAfterSign
    displayName: Notarize Build Output (MacOS only)
    type: boolean
    default: true
  - name: simulate
    displayName: Simulate operations (faster)
    type: boolean
    default: false
  - name: forceNugetPublish
    displayName: Force Publishing the Nuget output
    type: boolean
    default: false

# test ----------> | build ->   |            |
#                  |            | sign       |
# checkFormat ----------------> |------------| -> upload
#                               | binaryScan |
# srcScan --------------------> |            |
stages:
  - stage: test
    displayName: Run tests
    dependsOn: []
    jobs:
      - job: test
        displayName: Run tests
        condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 8'
          inputs:
            version: 8.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - task: DotNetCoreCLI@2
          displayName: Run tests
          enabled: true
          inputs:
            command: test
            workingDirectory: $(Build.SourcesDirectory)
            arguments: --no-restore

  - stage: build
    displayName: Build CLI
    dependsOn: [test]
    jobs:
      - job: build
        displayName: Build and publish
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
              packageType: "zip"
              compressionProgram: "none"
            'Linux-x64':
              rid: linux-x64
              packageType: "tar"
              compressionProgram: "gzip"
            'MacOS-x64':
              rid: osx-x64
              packageType: "tar"
              compressionProgram: "gzip"
            'MacOS-ARM':
              rid: osx-arm64
              packageType: "tar"
              compressionProgram: "gzip"
          # maxParallel: 2
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 8'
            condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
            inputs:
              version: 8.x

          - ${{ if ne(parameters.simulate, 'true') }}:
            - template: templates/nuget-packages.yaml
              parameters:
                extraRestoreArgs: -p:PublishReadyToRun=true
                vstsFeedName: ${{variables.internalFeed}}

          - pwsh: dotnet publish ./src/msgraph-cli.csproj -p:PublishSingleFile=true -p:PublishReadyToRun=true --no-restore --runtime $(rid) --self-contained true --configuration $(buildConfiguration) --output $(outputDir)
            workingDirectory: $(Build.SourcesDirectory)
            condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
            displayName: DotNet publish

          - template: templates/setup-powershell-environment.yml

          - task: PowerShell@2
            inputs:
              targetType: inline
              script: |
                New-Item $(outputDir) -ItemType Directory -Force
                echo "Test file" > $(outputDir)/mgc
                echo "Test file2" > $(outputDir)/mgc.txt
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            condition: and(succeeded(), eq('${{ parameters.simulate }}', 'true'))
            displayName: Simulate publish

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                . $(powershellScriptsDir)/BuildTools.ps1
                $archive = Compress-BuildOutput -OutputDir '$(outputDir)-$(rid)' -Source '$(outputDir)/*' -FileNameTemplate '$(fileNameTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)' -PackageType '$(packageType)' -TarCompression $(compressionProgram) -Cleanup
                $hasArchive = Test-Path $archive -PathType Leaf
                Write-Host "##vso[task.setvariable variable=HAS_ARTIFACTS]$hasArchive"
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            # Only create artifacts if we're building a tag, building main, or building a PR targeting main
            condition: and(succeeded(), or(eq('${{ parameters.forceSignOutput }}', 'true'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'main')))
            displayName: Compress published output

          - task: PublishPipelineArtifact@1
            # Only publish artifacts if they exist
            condition: and(succeeded(), eq(variables['HAS_ARTIFACTS'], 'True'))
            inputs:
              artifact: build-output-$(rid)
              path: $(outputDir)-$(rid)

    # Format takes a long time. keep it in its own stage
  - stage: checkFormat
    displayName: Check formatting
    condition: false
    dependsOn: []
    jobs:
      - job: checkFormat
        displayName: Check formatting
        condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET 8'
          inputs:
            version: 8.x

        # Restore NuGet packages (enables cache by default)
        - template: templates/nuget-packages.yaml
          parameters:
            vstsFeedName: ${{variables.internalFeed}}

        - pwsh: dotnet format --no-restore --include ./src/ --exclude ./src/generated/ --verify-no-changes
          displayName: Validate formatting
          enabled: true

  - stage: srcScan
    displayName: Scan source code
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
      - job: scan
        displayName: Scanning source
        condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              scanSource: true

  - stage: sign
    displayName: ESRP signing
    pool:
      vmImage: windows-latest
    dependsOn: [build]
    # Only sign binaries if we're building a tag.
    condition: and(succeeded(), or(eq('${{ parameters.forceSignOutput }}', 'true'), eq('${{ parameters.forceNugetPublish }}', 'true'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
    jobs:
      - job: esrpSign
        dependsOn: []
        variables:
          macSignOp: |
            [
                {
                    "keyCode": "CP-401337-Apple",
                    "OperationCode": "MacAppDeveloperSign",
                    "Parameters": {
                      "Hardening": "--options=runtime"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                }
            ]
          macNotarizeOp: |
            [
                {
                    "keyCode": "CP-401337-Apple",
                    "OperationCode": "MacAppNotarize",
                    "Parameters": {
                      "BundleId": "com.microsoft.microsoftgraphcli"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                }
            ]
        strategy:
          matrix:
            'Windows-x64':
              rid: win-x64
              vmImage: windows-latest
              packageType: "zip"
              compressionProgram: "none"
              sign: true
              pattern: |
                **\*.exe
                **\*.dll
              inlineSignOperation: |
                [
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolSign",
                    "Parameters": {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolVerify",
                    "Parameters": {},
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
              inlineNotarizeOperation: ""
            nuget:
              rid: nuget
              vmImage: windows-latest
              packageType: "zip"
              compressionProgram: "none"
              sign: true
              forceNugetPublish: ${{ parameters.forceNugetPublish }}
              pattern: |
                mgc.dll
              inlineSignOperation: |
                [
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolSign",
                        "parameters": [
                        {
                            "parameterName": "OpusName",
                            "parameterValue": "Microsoft"
                        },
                        {
                            "parameterName": "OpusInfo",
                            "parameterValue": "http://www.microsoft.com"
                        },
                        {
                            "parameterName": "FileDigest",
                            "parameterValue": "/fd \"SHA256\""
                        },
                        {
                            "parameterName": "PageHash",
                            "parameterValue": "/NPH"
                        },
                        {
                            "parameterName": "TimeStamp",
                            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              inlineNugetSignOperation: |
                [
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetSign",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]

            'MacOS-x64':
              rid: osx-x64
              vmImage: macOS-11
              packageType: "tar"
              compressionProgram: "gzip"
              sign: true
              notarize: ${{ parameters.notarizeAfterSign }}
              inlineSignOperation: ${{ variables.macSignOp }}
              inlineNotarizeOperation: ${{ variables.macNotarizeOp }}
            'MacOS-ARM':
              rid: osx-arm64
              vmImage: macOS-12
              packageType: "tar"
              compressionProgram: "gzip"
              sign: true
              notarize: ${{ parameters.notarizeAfterSign }}
              inlineSignOperation: ${{ variables.macSignOp }}
              inlineNotarizeOperation: ${{ variables.macNotarizeOp }}
        displayName: ESRP Signing
        pool:
          vmImage: $(vmImage)
        steps:
          - template: templates/setup-powershell-environment.yml

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                Write-Verbose 'pattern = ''$(pattern)'''
                Write-Verbose 'fileNameTemplate = ''$(fileNameTemplate)'''
                Write-Verbose 'artifactsDownloadLocation = ''$(artifactsDownloadLocation)'''
                Write-Verbose 'sign = ''$(sign)'''
                Write-Verbose 'forceNugetPublish = ''$(forceNugetPublish)'''
                Write-Verbose 'notarize = ''$(notarize)'''
                Write-Verbose 'inlineSignOperation = ''$(inlineSignOperation)'''
                Write-Verbose 'inlineNotarizeOperation = ''$(inlineNotarizeOperation)'''
                Write-Verbose 'inlineNugetSignOperation = ''$(inlineNugetSignOperation)'''
                $rid = '$(rid)'
                $shouldSign = '$(sign)'
                if ((-not [bool]::Parse($shouldSign)) -and '$(rid)' -eq 'nuget') {
                  $shouldSign = '$(forceNugetPublish)'
                }
                $shouldNotarize = '$(notarize)'
                $notarizeOp = '$(inlineNotarizeOperation)'
                $isNuget = $rid -eq 'nuget'
                $isDarwin = $rid.StartsWith('osx')
                $workDir = Join-Path -Path '$(artifactsDownloadLocation)' -ChildPath '$(rid)'
                $downloadDir = Join-Path -Path $workDir -ChildPath 'build-output-$(rid)'
                Write-Host "##vso[task.setvariable variable=RUNTIME_ID]$rid"
                Write-Host "##vso[task.setvariable variable=IS_NUGET]$isNuget"
                Write-Host "##vso[task.setvariable variable=IS_MACOS]$isDarwin"
                Write-Host "##vso[task.setvariable variable=SHOULD_SIGN]$shouldSign"
                Write-Host "##vso[task.setvariable variable=SHOULD_NOTARIZE]$shouldNotarize"
                Write-Host "##vso[task.setvariable variable=NOTARIZE_OPERATION]$notarizeOp"
                Write-Host "##vso[task.setvariable variable=WORKING_DIR]$workDir"
                Write-Host "##vso[task.setvariable variable=ARTIFACTS_PATH]$downloadDir"
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            displayName: Setup variables

          - pwsh: git config --global core.longpaths true
            displayName: Enable git's long file paths on Windows

          - checkout: self

          # Nuget tool doesn't work with multi-stage builds
          - task: UseDotNet@2
            displayName: 'Use .NET 8'
            condition: and(false, succeeded(), ne('${{ parameters.simulate }}', 'true'), eq(variables['IS_NUGET'], 'true'))
            inputs:
              version: 8.x

          - ${{ if ne(parameters.simulate, 'true') }}:
            - template: templates/nuget-packages.yaml
              parameters:
                vstsFeedName: ${{variables.internalFeed}}
                enabled: $(IS_NUGET)

          - task: DotNetCoreCLI@2
            displayName: "build nuget tool"
            inputs:
              projects: './src/msgraph-cli.csproj'
              arguments: " --no-restore --configuration $(buildConfiguration) --no-incremental"
            condition: and(false, succeeded(), ne('${{ parameters.simulate }}', 'true'), eq(variables['IS_NUGET'], 'true'))

          - pwsh: |
              New-Item '$(ARTIFACTS_PATH)' -ItemType Directory -Force
              echo "Test file" > '$(ARTIFACTS_PATH)/mgc.dll'
              echo "Test file2" > '$(ARTIFACTS_PATH)/mgc.txt'
            condition: and(false, succeeded(), eq('${{ parameters.simulate }}', 'true'), eq(variables['IS_NUGET'], 'true'))
            displayName: Simulate nuget build

          - task: DownloadPipelineArtifact@2
            inputs:
              patterns: build-output-$(rid)/**/*
              path: $(WORKING_DIR)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), ne(variables['IS_NUGET'], 'true'))

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                $path = '$(ARTIFACTS_PATH)'
                if ('$(IS_NUGET)'.ToLower() -eq 'true' -and ('${{ parameters.simulate }}'.ToLower() -ne 'true')) {
                  $path = './src/obj/$(buildConfiguration)/net8.0'
                }
                Write-Verbose "Checking if $path has files"
                $hasArtifacts = Test-Path $path/* -PathType Leaf
                Write-Verbose "Result $hasArtifacts"

                $shouldSign = '$(SHOULD_SIGN)'.ToLower() -eq 'true'
                if ($shouldSign) {
                  $shouldSign = $shouldSign -and $hasArtifacts
                }
                Write-Host "##vso[task.setvariable variable=SIGN_PATH]$path"
                Write-Host "##vso[task.setvariable variable=SHOULD_SIGN]$shouldSign"
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            displayName: Check for artifacts

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                . $(powershellScriptsDir)/BuildTools.ps1
                $zipName = Get-PackageName -FileNameTemplate '$(fileNameTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)' -PackageType "zip"
                Write-Host "##vso[task.setvariable variable=ZIP_NAME]$zipName"
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            displayName: Compute zip name
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), ne(variables['IS_NUGET'], 'true'))

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                . $(powershellScriptsDir)/BuildTools.ps1

                $destDir = '$(ARTIFACTS_PATH)-src'
                $sourceDir = '$(ARTIFACTS_PATH)'
                Expand-EsrpArtifacts -SourceDir $sourceDir -OutputDir $destDir -FileNameTemplate '$(fileNameTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)' -PackageType $(packageType) -TarCompression $(compressionProgram) -Cleanup
                Move-Item -Path $destDir -Destination $sourceDir

                Move-NonExecutableItems -SourcePath $sourceDir -ExecutableItemNames mgc,mgc.exe
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            displayName: Extract archive
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), ne(variables['IS_NUGET'], 'True'))

          - template: templates/prepare-unsigned-executable-darwin.yaml
            parameters:
              executablePath: $(SIGN_PATH)
              executableName: mgc
              zipName: $(ZIP_NAME)
              targetRuntime: $(rid)
              enabled: $(IS_MACOS)
              certificateName: $(CERTIFICATE_ID)

          - pwsh: |
              Write-Host "##vso[task.setvariable variable=ESRP_FILE_PATTERN]$(ZIP_NAME)"
            displayName: Compute ESRP filter pattern osx
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), eq(variables['IS_MACOS'], 'true'))

          - pwsh: |
              Write-Host "##vso[task.setvariable variable=ESRP_FILE_PATTERN]$(pattern)"
            displayName: Compute ESRP filter pattern Windows/Nuget
            condition: and(false, succeeded(), eq(variables['SHOULD_SIGN'], 'True'), or(startsWith(variables['RUNTIME_ID'], 'win'), eq(variables['IS_NUGET'], 'true')))

          # ESRP needs .NET 6
          - task: UseDotNet@2
            displayName: 'Change to .NET 6'
            condition: and(false, succeeded(), ne('${{ parameters.simulate }}', 'true'), eq(variables['IS_NUGET'], 'true'))
            inputs:
              version: 6.x

          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning (Sign Build output)'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(SIGN_PATH)
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: $(ESRP_FILE_PATTERN)
              inlineOperation: $(inlineSignOperation)
              SessionTimeout: 20
            condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'), eq(variables['SHOULD_SIGN'], 'True'))

          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning (Notarize)'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(SIGN_PATH)
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: $(ESRP_FILE_PATTERN)
              inlineOperation: $(inlineNotarizeOperation)
              SessionTimeout: 20
            condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'), gt(length(variables['NOTARIZE_OPERATION']), 0), ne(variables['NOTARIZE_OPERATION'], '$(inlineNotarizeOperation)'), and(eq(variables['SHOULD_SIGN'], 'True'), eq(variables['SHOULD_NOTARIZE'], 'True')))

          - pwsh: |
              dotnet pack ./src/msgraph-cli.csproj --configuration $(buildConfiguration) --output $(SIGN_PATH) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg -v d
            workingDirectory: $(Build.SourcesDirectory)
            displayName: DotNet pack (nuget)
            condition: and(false, succeeded(), eq(variables['SHOULD_SIGN'], 'True'), ne('${{ parameters.simulate }}', 'true'), eq(variables['IS_NUGET'], 'true'))

          - task: EsrpCodeSigning@2
            displayName: 'ESRP CodeSigning (Sign Nuget)'
            inputs:
              # Pipeline validation can't expand service name from matrix variables
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(SIGN_PATH)
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: "*.nupkg"
              inlineOperation: $(inlineNugetSignOperation)
              SessionTimeout: 20
            condition: and(false, succeeded(), ne('${{ parameters.simulate }}', 'true'), eq(variables['SHOULD_SIGN'], 'True'), eq(variables['IS_NUGET'], 'true'))

          - pwsh: |
              $artifactsPath = '$(SIGN_PATH)'
              Write-Host "##vso[task.setvariable variable=WORKING_DIR]$artifactsPath"
            condition: and(false, succeeded(), eq(variables['SHOULD_SIGN'], 'True'), eq(variables['IS_NUGET'], 'true'))

          - task: PowerShell@2
            displayName: Simulate ESRP
            inputs:
              pwsh: true
              targetType: inline
              script: |
                Write-Verbose "Signing..."
                . $(powershellScriptsDir)/BuildTools.ps1

                if ($IsMacOS) {
                  $zipPath = Join-Path -Path '$(SIGN_PATH)' -ChildPath '$(ZIP_NAME)'
                  Write-Verbose "Expanding $zipPath"
                  $output = Split-Path -Path $zipPath -Parent
                  $output = Join-Path $output "out"
                  $output = New-Item $output -ItemType Directory -Force
                  Expand-Archive -Path "$zipPath" -DestinationPath "$output"
                  Remove-Item $zipPath
                }
                echo "Success" > $(SIGN_PATH)/Sign-Summary.md
                if ($IsMacOS) {
                  Write-Verbose "Compressing updated source"
                  Compress-Archive -Path "$output/*" -DestinationPath $zipPath -Force
                  Remove-Item $output -Recurse -Force
                }

              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), eq('${{ parameters.simulate }}', 'true'))

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                . $(powershellScriptsDir)/BuildTools.ps1
                $fileName = Get-FileName -FileNameTemplate '$(fileNameTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)'
                Compress-SignedFiles -SourceDir '$(SIGN_PATH)' -ReportDir '$(WORKING_DIR)' -OutputDir '$(WORKING_DIR)' -OutputFileName $fileName -PackageType zip -Cleanup
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            displayName: Compress signed files (Windows)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['RUNTIME_ID'], 'win'))

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: inline
              script: |
                . $(powershellScriptsDir)/BuildTools.ps1
                $zipPath = Join-Path -Path '$(SIGN_PATH)' -ChildPath '$(ZIP_NAME)'
                $fileName = Get-FileName -FileNameTemplate '$(fileNameTemplate)' -BranchOrTagName '$(branchOrTagName)' -RuntimeIdentifier '$(rid)'
                Update-SignedArchive -InputFile $zipPath -ReportDir '$(WORKING_DIR)' -OutputDir '$(WORKING_DIR)' -OutputFileName "$fileName" -ExeNames mgc -Cleanup
              verbosePreference: '$(OUTPUT_PREFERENCE)'
              debugPreference: '$(OUTPUT_PREFERENCE)'
              informationPreference: '$(OUTPUT_PREFERENCE)'
            displayName: Update signed files (MacOS)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'), startsWith(variables['RUNTIME_ID'], 'osx'))

          - task: PublishPipelineArtifact@1
            inputs:
              artifact: sign-output-$(rid)
              path: $(WORKING_DIR)
            condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'True'))

  - stage: binaryScan
    displayName: Scan binaries (Anti malware, BinSkim)
    dependsOn: [build, srcScan] # Check format would be a dependency if enabled.
    pool:
      vmImage: windows-latest
    # Only scan binaries if we're building a tag, building main, or building a PR targeting main
    condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'main'), eq('${{ parameters.forceNugetPublish }}', 'true')))
    jobs:
      - job: scan
        displayName: Scanning binaries
        condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
        steps:
          - template: templates/compliance-checks.yaml
            parameters:
              artifactsDownloadLocation: $(artifactsDownloadLocation)
              scanBinary: true

  - stage: upload
    dependsOn: [binaryScan, sign]
    condition: and(succeeded(), ne('${{ parameters.simulate }}', 'true'))
    jobs:
      - job: uploadGitHub
        displayName: Upload binaries (GitHub)
        # Only upload release if we're building a tag.
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              path: $(artifactsDownloadLocation)
          - task: GithubRelease@1
            displayName: 'Upload Artifacts to GitHub Release'
            inputs:
              gitHubConnection: $(repositoryConnection)
              repositoryName: '$(Build.Repository.Name)'
              action: edit
              tag: $(branchOrTagName)
              addChangeLog: false
              assetUploadMode: replace
              assets: |
                $(artifactsDownloadLocation)/build-output-linux-*/*.tar*
                $(artifactsDownloadLocation)/sign-output-*/*.tar*
                $(artifactsDownloadLocation)/sign-output-*/*.zip

      - deployment: deployNuget
        displayName: Deploy Nuget
        dependsOn: []
        environment: microsoftgraph-nuget-org
        # Disable nuget deployment until performance is improved.
        condition: false
        # condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq('${{ parameters.forceNugetPublish }}', 'true')))
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: ubuntu-latest
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: sign-output-nuget
                    source: current
                    path: $(artifactsDownloadLocation)/nuget
                - task: NuGetCommand@2
                  displayName: "NuGet push"
                  inputs:
                    command: push
                    packagesToPush: "$(artifactsDownloadLocation)/nuget/Microsoft.Graph.Cli.*.nupkg;!$(artifactsDownloadLocation)/nuget/Microsoft.Graph.Cli.*.symbols.nupkg;"
                    nuGetFeedType: external
                    publishFeedCredentials: "microsoftgraph NuGet connection"

