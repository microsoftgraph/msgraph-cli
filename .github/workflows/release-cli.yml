name: "Release CLI"
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag to build'
        required: true
        type: string
jobs:
  package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rid: ['win-x64', 'osx-x64', 'linux-x64']
    env:
      MS_NUGET_URL: https://nuget.pkg.github.com/microsoft/index.json
      PACKAGE_VERSION: ${{github.event.inputs.tag || github.ref_name || 'v0.1.0'}}
      PACKAGE_ZIP_TEMPLATE: "msgraph-cli-{0}-{1}.zip"
      OUTPUT_DIR: /tmp/publish
    steps:
      - id: get-version
        run: |
          PACKAGE_VERSION=$(echo $PACKAGE_VERSION | sed s/^v//)
          echo "::set-output name=version::$PACKAGE_VERSION"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          ref: ${{github.event.inputs.tag || ''}}
      - name: Setup .NET Core SDK 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.x
      - name: Add NuGet kiota source
        # NOTE: Password encryption is not supported for the linux platform (Encryption is only supported on Windows platforms.)
        run: |
          dotnet nuget add source ${{env.MS_NUGET_URL}} -n ms-gh -u ${{secrets.NUGET_USER}} -p ${{secrets.NUGET_PASSWORD}} --store-password-in-clear-text
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Build
        run: dotnet publish --runtime ${{matrix.rid}} --self-contained true --configuration Release --output ${{env.OUTPUT_DIR}}
      - name: Package
        run: |
          cd ${{env.OUTPUT_DIR}}
          zip ${{format(env.PACKAGE_ZIP_TEMPLATE, matrix.rid, steps.get-version.outputs.version)}} $(ls -a)
      - name: Add to release
        run: |
          gh release upload ${{env.PACKAGE_VERSION}} ${{env.OUTPUT_DIR}}/${{format(env.PACKAGE_ZIP_TEMPLATE, matrix.rid, steps.get-version.outputs.version)}} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
